
KuartisHomework.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803c00  00803c00  000002c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00803c00  00803c00  000002c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000030e2  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002333  00000000  00000000  0000347e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007c4  00000000  00000000  000057b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00005f78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000167d  00000000  00000000  000060bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000513  00000000  00000000  00007739  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00007c4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__vector_3>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_6>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  8c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	2c e3       	ldi	r18, 0x3C	; 60
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	bc e3       	ldi	r27, 0x3C	; 60
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	ab 30       	cpi	r26, 0x0B	; 11
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	4d d0       	rcall	.+154    	; 0x148 <main>
  ae:	cc c0       	rjmp	.+408    	; 0x248 <_exit>

000000b0 <__bad_interrupt>:
  b0:	a7 cf       	rjmp	.-178    	; 0x0 <__vectors>

000000b2 <Initialize>:
	//Press power button
	InputState.currentState = POWER;
	WriteInput();
	setState(); // OFF
	_delay_ms(1000);
  b2:	78 94       	sei
  b4:	e0 e0       	ldi	r30, 0x00	; 0
  b6:	f4 e0       	ldi	r31, 0x04	; 4
  b8:	87 e2       	ldi	r24, 0x27	; 39
  ba:	80 83       	st	Z, r24
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	84 83       	std	Z+4, r24	; 0x04
  c0:	a0 e6       	ldi	r26, 0x60	; 96
  c2:	b4 e0       	ldi	r27, 0x04	; 4
  c4:	84 e7       	ldi	r24, 0x74	; 116
  c6:	8c 93       	st	X, r24
  c8:	14 96       	adiw	r26, 0x04	; 4
  ca:	1c 92       	st	X, r1
  cc:	14 97       	sbiw	r26, 0x04	; 4
  ce:	8c 91       	ld	r24, X
  d0:	80 68       	ori	r24, 0x80	; 128
  d2:	8c 93       	st	X, r24
  d4:	14 96       	adiw	r26, 0x04	; 4
  d6:	8c 91       	ld	r24, X
  d8:	14 97       	sbiw	r26, 0x04	; 4
  da:	8f 77       	andi	r24, 0x7F	; 127
  dc:	14 96       	adiw	r26, 0x04	; 4
  de:	8c 93       	st	X, r24
  e0:	80 81       	ld	r24, Z
  e2:	87 7f       	andi	r24, 0xF7	; 247
  e4:	80 83       	st	Z, r24
  e6:	83 89       	ldd	r24, Z+19	; 0x13
  e8:	83 60       	ori	r24, 0x03	; 3
  ea:	83 8b       	std	Z+19, r24	; 0x13
  ec:	8f b7       	in	r24, 0x3f	; 63
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	8f bf       	out	0x3f, r24	; 63
  f2:	78 94       	sei
  f4:	10 92 09 3c 	sts	0x3C09, r1	; 0x803c09 <State>
  f8:	10 92 06 3c 	sts	0x3C06, r1	; 0x803c06 <LightState>
  fc:	10 92 0a 3c 	sts	0x3C0A, r1	; 0x803c0a <NECState>
 100:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__RODATA_PM_OFFSET__+0x7fc147>
 104:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__RODATA_PM_OFFSET__+0x7fc141>
 108:	81 11       	cpse	r24, r1
 10a:	fc cf       	rjmp	.-8      	; 0x104 <__EEPROM_REGION_LENGTH__+0x4>
 10c:	e0 e4       	ldi	r30, 0x40	; 64
 10e:	f1 e0       	ldi	r31, 0x01	; 1
 110:	20 e0       	ldi	r18, 0x00	; 0
 112:	30 e8       	ldi	r19, 0x80	; 128
 114:	22 87       	std	Z+10, r18	; 0x0a
 116:	33 87       	std	Z+11, r19	; 0x0b
 118:	82 81       	ldd	r24, Z+2	; 0x02
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	82 83       	std	Z+2, r24	; 0x02
 11e:	81 e8       	ldi	r24, 0x81	; 129
 120:	80 83       	st	Z, r24
 122:	24 87       	std	Z+12, r18	; 0x0c
 124:	35 87       	std	Z+13, r19	; 0x0d
 126:	08 95       	ret

00000128 <disableIR_ISR>:
 128:	e0 e0       	ldi	r30, 0x00	; 0
 12a:	f4 e0       	ldi	r31, 0x04	; 4
 12c:	83 89       	ldd	r24, Z+19	; 0x13
 12e:	13 8a       	std	Z+19, r1	; 0x13
 130:	08 95       	ret

00000132 <IR_Read>:
 132:	80 91 0a 3c 	lds	r24, 0x3C0A	; 0x803c0a <NECState>
 136:	81 11       	cpse	r24, r1
 138:	06 c0       	rjmp	.+12     	; 0x146 <IR_Read+0x14>
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	80 93 00 3c 	sts	0x3C00, r24	; 0x803c00 <__DATA_REGION_ORIGIN__>
 142:	90 93 01 3c 	sts	0x3C01, r25	; 0x803c01 <__DATA_REGION_ORIGIN__+0x1>
 146:	08 95       	ret

00000148 <main>:
//Global Variables
int volatile state = 0;
int volatile debug_flag = 0;
int main(void)
{
	CCP = 0xD8;
 148:	88 ed       	ldi	r24, 0xD8	; 216
 14a:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.MCLKLOCK =0x00;
 14c:	e0 e6       	ldi	r30, 0x60	; 96
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	12 82       	std	Z+2, r1	; 0x02
	CCP = 0xD8;
 152:	84 bf       	out	0x34, r24	; 52
    CLKCTRL.MCLKCTRLB = 0;
 154:	11 82       	std	Z+1, r1	; 0x01
	CCP = 0xD8;
 156:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.MCLKLOCK =0x01;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	82 83       	std	Z+2, r24	; 0x02
	CCP = 0xD8;
	CLKCTRL.MCLKCTRLB = 0x13;
	CCP = 0xD8;
	CLKCTRL.MCLKLOCK =0x01;
	*/
	PORTD.DIR = (1<<LED_ON_OFF);
 15c:	e0 e6       	ldi	r30, 0x60	; 96
 15e:	f4 e0       	ldi	r31, 0x04	; 4
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	80 83       	st	Z, r24
	PORTD.OUT = 0x00; // Close All LEDs
 164:	14 82       	std	Z+4, r1	; 0x04
	Initialize();
 166:	a5 df       	rcall	.-182    	; 0xb2 <Initialize>
 168:	ff cf       	rjmp	.-2      	; 0x168 <main+0x20>

0000016a <__vector_6>:

/************************************************************************/
/* Timer interrupt increases a counter every 1ms.                                                                     */
/************************************************************************/

ISR(PORTA_PORT_vect){
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	2f 93       	push	r18
 176:	3f 93       	push	r19
 178:	4f 93       	push	r20
 17a:	5f 93       	push	r21
 17c:	6f 93       	push	r22
 17e:	7f 93       	push	r23
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
 184:	af 93       	push	r26
 186:	bf 93       	push	r27
 188:	ef 93       	push	r30
 18a:	ff 93       	push	r31
	
	IR_Read();
 18c:	d2 df       	rcall	.-92     	; 0x132 <IR_Read>
	disableIR_ISR();
 18e:	cc df       	rcall	.-104    	; 0x128 <disableIR_ISR>
	 //  disable interrupt 
}
 190:	ff 91       	pop	r31
 192:	ef 91       	pop	r30
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	7f 91       	pop	r23
 19e:	6f 91       	pop	r22
 1a0:	5f 91       	pop	r21
 1a2:	4f 91       	pop	r20
 1a4:	3f 91       	pop	r19
 1a6:	2f 91       	pop	r18
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <__vector_3>:
ISR(RTC_CNT_vect){
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	8f 93       	push	r24
 1be:	9f 93       	push	r25
 1c0:	af 93       	push	r26
 1c2:	bf 93       	push	r27
	 RTC.INTFLAGS = RTC_OVF_bm;
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__RODATA_PM_OFFSET__+0x7fc143>
	if(idle_flag == 1){
 1ca:	80 91 00 3c 	lds	r24, 0x3C00	; 0x803c00 <__DATA_REGION_ORIGIN__>
 1ce:	90 91 01 3c 	lds	r25, 0x3C01	; 0x803c01 <__DATA_REGION_ORIGIN__+0x1>
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	41 f5       	brne	.+80     	; 0x226 <__vector_3+0x74>
		counter++;
 1d6:	80 91 02 3c 	lds	r24, 0x3C02	; 0x803c02 <counter>
 1da:	90 91 03 3c 	lds	r25, 0x3C03	; 0x803c03 <counter+0x1>
 1de:	a0 91 04 3c 	lds	r26, 0x3C04	; 0x803c04 <counter+0x2>
 1e2:	b0 91 05 3c 	lds	r27, 0x3C05	; 0x803c05 <counter+0x3>
 1e6:	01 96       	adiw	r24, 0x01	; 1
 1e8:	a1 1d       	adc	r26, r1
 1ea:	b1 1d       	adc	r27, r1
 1ec:	80 93 02 3c 	sts	0x3C02, r24	; 0x803c02 <counter>
 1f0:	90 93 03 3c 	sts	0x3C03, r25	; 0x803c03 <counter+0x1>
 1f4:	a0 93 04 3c 	sts	0x3C04, r26	; 0x803c04 <counter+0x2>
 1f8:	b0 93 05 3c 	sts	0x3C05, r27	; 0x803c05 <counter+0x3>
		if(counter >= 4){
 1fc:	80 91 02 3c 	lds	r24, 0x3C02	; 0x803c02 <counter>
 200:	90 91 03 3c 	lds	r25, 0x3C03	; 0x803c03 <counter+0x1>
 204:	a0 91 04 3c 	lds	r26, 0x3C04	; 0x803c04 <counter+0x2>
 208:	b0 91 05 3c 	lds	r27, 0x3C05	; 0x803c05 <counter+0x3>
 20c:	04 97       	sbiw	r24, 0x04	; 4
 20e:	a1 05       	cpc	r26, r1
 210:	b1 05       	cpc	r27, r1
 212:	8c f0       	brlt	.+34     	; 0x236 <__vector_3+0x84>
			counter = 0;
 214:	10 92 02 3c 	sts	0x3C02, r1	; 0x803c02 <counter>
 218:	10 92 03 3c 	sts	0x3C03, r1	; 0x803c03 <counter+0x1>
 21c:	10 92 04 3c 	sts	0x3C04, r1	; 0x803c04 <counter+0x2>
 220:	10 92 05 3c 	sts	0x3C05, r1	; 0x803c05 <counter+0x3>
 224:	08 c0       	rjmp	.+16     	; 0x236 <__vector_3+0x84>
		}
	}
	else{
		counter = 0;
 226:	10 92 02 3c 	sts	0x3C02, r1	; 0x803c02 <counter>
 22a:	10 92 03 3c 	sts	0x3C03, r1	; 0x803c03 <counter+0x1>
 22e:	10 92 04 3c 	sts	0x3C04, r1	; 0x803c04 <counter+0x2>
 232:	10 92 05 3c 	sts	0x3C05, r1	; 0x803c05 <counter+0x3>
	}
	
}
 236:	bf 91       	pop	r27
 238:	af 91       	pop	r26
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <_exit>:
 248:	f8 94       	cli

0000024a <__stop_program>:
 24a:	ff cf       	rjmp	.-2      	; 0x24a <__stop_program>
