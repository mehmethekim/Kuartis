
KuartisHomework.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803c00  00803c00  0000100a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f96  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  00803c00  00803c00  0000100a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000100a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000103c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000308b  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022af  00000000  00000000  0000419b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b4f  00000000  00000000  0000644a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  00006f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001825  00000000  00000000  00007140  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000196  00000000  00000000  00008965  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00008afb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__vector_3>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__vector_6>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  8c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
  9c:	1c e3       	ldi	r17, 0x3C	; 60
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	bc e3       	ldi	r27, 0x3C	; 60
  a2:	e6 e9       	ldi	r30, 0x96	; 150
  a4:	ff e0       	ldi	r31, 0x0F	; 15
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
  b2:	2c e3       	ldi	r18, 0x3C	; 60
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	bc e3       	ldi	r27, 0x3C	; 60
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 33       	cpi	r26, 0x3D	; 61
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e9 d4       	rcall	.+2514   	; 0xa96 <main>
  c4:	66 c7       	rjmp	.+3788   	; 0xf92 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Buzzer>:
BUZZER_SOUND_INFO BuzzerState;
volatile int32_t BuzzerFlag = 0;
volatile int32_t BuzzerCounter = 0;
volatile int32_t Pitch_flag=0;
void Buzzer(){
	BuzzerFlag=1;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	a0 e0       	ldi	r26, 0x00	; 0
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	80 93 30 3c 	sts	0x3C30, r24	; 0x803c30 <BuzzerFlag>
  d4:	90 93 31 3c 	sts	0x3C31, r25	; 0x803c31 <BuzzerFlag+0x1>
  d8:	a0 93 32 3c 	sts	0x3C32, r26	; 0x803c32 <BuzzerFlag+0x2>
  dc:	b0 93 33 3c 	sts	0x3C33, r27	; 0x803c33 <BuzzerFlag+0x3>
	switch(BuzzerState.currentState){
  e0:	80 91 3c 3c 	lds	r24, 0x3C3C	; 0x803c3c <BuzzerState>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	09 f4       	brne	.+2      	; 0xea <Buzzer+0x22>
  e8:	91 c0       	rjmp	.+290    	; 0x20c <__EEPROM_REGION_LENGTH__+0x10c>
  ea:	30 f4       	brcc	.+12     	; 0xf8 <Buzzer+0x30>
  ec:	88 23       	and	r24, r24
  ee:	71 f0       	breq	.+28     	; 0x10c <__EEPROM_REGION_LENGTH__+0xc>
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	09 f4       	brne	.+2      	; 0xf6 <Buzzer+0x2e>
  f4:	4b c0       	rjmp	.+150    	; 0x18c <__EEPROM_REGION_LENGTH__+0x8c>
  f6:	08 95       	ret
  f8:	85 30       	cpi	r24, 0x05	; 5
  fa:	09 f4       	brne	.+2      	; 0xfe <Buzzer+0x36>
  fc:	ae c0       	rjmp	.+348    	; 0x25a <__EEPROM_REGION_LENGTH__+0x15a>
  fe:	86 30       	cpi	r24, 0x06	; 6
 100:	09 f4       	brne	.+2      	; 0x104 <__EEPROM_REGION_LENGTH__+0x4>
 102:	c2 c0       	rjmp	.+388    	; 0x288 <__EEPROM_REGION_LENGTH__+0x188>
 104:	83 30       	cpi	r24, 0x03	; 3
 106:	09 f0       	breq	.+2      	; 0x10a <__EEPROM_REGION_LENGTH__+0xa>
 108:	ce c0       	rjmp	.+412    	; 0x2a6 <__EEPROM_REGION_LENGTH__+0x1a6>
 10a:	90 c0       	rjmp	.+288    	; 0x22c <__EEPROM_REGION_LENGTH__+0x12c>
		case(POWER_ON_SOUND):
			if(BuzzerCounter%2==0&&Pitch_flag==1){
 10c:	80 91 2c 3c 	lds	r24, 0x3C2C	; 0x803c2c <BuzzerCounter>
 110:	90 91 2d 3c 	lds	r25, 0x3C2D	; 0x803c2d <BuzzerCounter+0x1>
 114:	a0 91 2e 3c 	lds	r26, 0x3C2E	; 0x803c2e <BuzzerCounter+0x2>
 118:	b0 91 2f 3c 	lds	r27, 0x3C2F	; 0x803c2f <BuzzerCounter+0x3>
 11c:	80 fd       	sbrc	r24, 0
 11e:	11 c0       	rjmp	.+34     	; 0x142 <__EEPROM_REGION_LENGTH__+0x42>
 120:	80 91 28 3c 	lds	r24, 0x3C28	; 0x803c28 <Pitch_flag>
 124:	90 91 29 3c 	lds	r25, 0x3C29	; 0x803c29 <Pitch_flag+0x1>
 128:	a0 91 2a 3c 	lds	r26, 0x3C2A	; 0x803c2a <Pitch_flag+0x2>
 12c:	b0 91 2b 3c 	lds	r27, 0x3C2B	; 0x803c2b <Pitch_flag+0x3>
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	a1 05       	cpc	r26, r1
 134:	b1 05       	cpc	r27, r1
 136:	29 f4       	brne	.+10     	; 0x142 <__EEPROM_REGION_LENGTH__+0x42>
				PORTD.OUT ^= (1<<BUZZER);
 138:	e0 e6       	ldi	r30, 0x60	; 96
 13a:	f4 e0       	ldi	r31, 0x04	; 4
 13c:	84 81       	ldd	r24, Z+4	; 0x04
 13e:	80 58       	subi	r24, 0x80	; 128
 140:	84 83       	std	Z+4, r24	; 0x04
			}
			if(BuzzerCounter%10==0&&Pitch_flag==0){
 142:	60 91 2c 3c 	lds	r22, 0x3C2C	; 0x803c2c <BuzzerCounter>
 146:	70 91 2d 3c 	lds	r23, 0x3C2D	; 0x803c2d <BuzzerCounter+0x1>
 14a:	80 91 2e 3c 	lds	r24, 0x3C2E	; 0x803c2e <BuzzerCounter+0x2>
 14e:	90 91 2f 3c 	lds	r25, 0x3C2F	; 0x803c2f <BuzzerCounter+0x3>
 152:	2a e0       	ldi	r18, 0x0A	; 10
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	50 e0       	ldi	r21, 0x00	; 0
 15a:	c7 d6       	rcall	.+3470   	; 0xeea <__divmodsi4>
 15c:	67 2b       	or	r22, r23
 15e:	68 2b       	or	r22, r24
 160:	69 2b       	or	r22, r25
 162:	09 f0       	breq	.+2      	; 0x166 <__EEPROM_REGION_LENGTH__+0x66>
 164:	a0 c0       	rjmp	.+320    	; 0x2a6 <__EEPROM_REGION_LENGTH__+0x1a6>
 166:	80 91 28 3c 	lds	r24, 0x3C28	; 0x803c28 <Pitch_flag>
 16a:	90 91 29 3c 	lds	r25, 0x3C29	; 0x803c29 <Pitch_flag+0x1>
 16e:	a0 91 2a 3c 	lds	r26, 0x3C2A	; 0x803c2a <Pitch_flag+0x2>
 172:	b0 91 2b 3c 	lds	r27, 0x3C2B	; 0x803c2b <Pitch_flag+0x3>
 176:	89 2b       	or	r24, r25
 178:	8a 2b       	or	r24, r26
 17a:	8b 2b       	or	r24, r27
 17c:	09 f0       	breq	.+2      	; 0x180 <__EEPROM_REGION_LENGTH__+0x80>
 17e:	93 c0       	rjmp	.+294    	; 0x2a6 <__EEPROM_REGION_LENGTH__+0x1a6>
				PORTD.OUT ^= (1<<BUZZER);
 180:	e0 e6       	ldi	r30, 0x60	; 96
 182:	f4 e0       	ldi	r31, 0x04	; 4
 184:	84 81       	ldd	r24, Z+4	; 0x04
 186:	80 58       	subi	r24, 0x80	; 128
 188:	84 83       	std	Z+4, r24	; 0x04
 18a:	08 95       	ret
			}
			
						
			break;
		case(POWER_OFF_SOUND):
			if(BuzzerCounter%2==0&&Pitch_flag==0){
 18c:	80 91 2c 3c 	lds	r24, 0x3C2C	; 0x803c2c <BuzzerCounter>
 190:	90 91 2d 3c 	lds	r25, 0x3C2D	; 0x803c2d <BuzzerCounter+0x1>
 194:	a0 91 2e 3c 	lds	r26, 0x3C2E	; 0x803c2e <BuzzerCounter+0x2>
 198:	b0 91 2f 3c 	lds	r27, 0x3C2F	; 0x803c2f <BuzzerCounter+0x3>
 19c:	80 fd       	sbrc	r24, 0
 19e:	11 c0       	rjmp	.+34     	; 0x1c2 <__EEPROM_REGION_LENGTH__+0xc2>
 1a0:	80 91 28 3c 	lds	r24, 0x3C28	; 0x803c28 <Pitch_flag>
 1a4:	90 91 29 3c 	lds	r25, 0x3C29	; 0x803c29 <Pitch_flag+0x1>
 1a8:	a0 91 2a 3c 	lds	r26, 0x3C2A	; 0x803c2a <Pitch_flag+0x2>
 1ac:	b0 91 2b 3c 	lds	r27, 0x3C2B	; 0x803c2b <Pitch_flag+0x3>
 1b0:	89 2b       	or	r24, r25
 1b2:	8a 2b       	or	r24, r26
 1b4:	8b 2b       	or	r24, r27
 1b6:	29 f4       	brne	.+10     	; 0x1c2 <__EEPROM_REGION_LENGTH__+0xc2>
				PORTD.OUT ^= (1<<BUZZER);
 1b8:	e0 e6       	ldi	r30, 0x60	; 96
 1ba:	f4 e0       	ldi	r31, 0x04	; 4
 1bc:	84 81       	ldd	r24, Z+4	; 0x04
 1be:	80 58       	subi	r24, 0x80	; 128
 1c0:	84 83       	std	Z+4, r24	; 0x04
			}
			if(BuzzerCounter%10==0&&Pitch_flag==1){
 1c2:	60 91 2c 3c 	lds	r22, 0x3C2C	; 0x803c2c <BuzzerCounter>
 1c6:	70 91 2d 3c 	lds	r23, 0x3C2D	; 0x803c2d <BuzzerCounter+0x1>
 1ca:	80 91 2e 3c 	lds	r24, 0x3C2E	; 0x803c2e <BuzzerCounter+0x2>
 1ce:	90 91 2f 3c 	lds	r25, 0x3C2F	; 0x803c2f <BuzzerCounter+0x3>
 1d2:	2a e0       	ldi	r18, 0x0A	; 10
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	50 e0       	ldi	r21, 0x00	; 0
 1da:	87 d6       	rcall	.+3342   	; 0xeea <__divmodsi4>
 1dc:	67 2b       	or	r22, r23
 1de:	68 2b       	or	r22, r24
 1e0:	69 2b       	or	r22, r25
 1e2:	09 f0       	breq	.+2      	; 0x1e6 <__EEPROM_REGION_LENGTH__+0xe6>
 1e4:	60 c0       	rjmp	.+192    	; 0x2a6 <__EEPROM_REGION_LENGTH__+0x1a6>
 1e6:	80 91 28 3c 	lds	r24, 0x3C28	; 0x803c28 <Pitch_flag>
 1ea:	90 91 29 3c 	lds	r25, 0x3C29	; 0x803c29 <Pitch_flag+0x1>
 1ee:	a0 91 2a 3c 	lds	r26, 0x3C2A	; 0x803c2a <Pitch_flag+0x2>
 1f2:	b0 91 2b 3c 	lds	r27, 0x3C2B	; 0x803c2b <Pitch_flag+0x3>
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	a1 05       	cpc	r26, r1
 1fa:	b1 05       	cpc	r27, r1
 1fc:	09 f0       	breq	.+2      	; 0x200 <__EEPROM_REGION_LENGTH__+0x100>
 1fe:	53 c0       	rjmp	.+166    	; 0x2a6 <__EEPROM_REGION_LENGTH__+0x1a6>
				PORTD.OUT ^= (1<<BUZZER);
 200:	e0 e6       	ldi	r30, 0x60	; 96
 202:	f4 e0       	ldi	r31, 0x04	; 4
 204:	84 81       	ldd	r24, Z+4	; 0x04
 206:	80 58       	subi	r24, 0x80	; 128
 208:	84 83       	std	Z+4, r24	; 0x04
 20a:	08 95       	ret
			}
		break;
		case(INC_SOUND):
			if(BuzzerCounter%2==0){
 20c:	80 91 2c 3c 	lds	r24, 0x3C2C	; 0x803c2c <BuzzerCounter>
 210:	90 91 2d 3c 	lds	r25, 0x3C2D	; 0x803c2d <BuzzerCounter+0x1>
 214:	a0 91 2e 3c 	lds	r26, 0x3C2E	; 0x803c2e <BuzzerCounter+0x2>
 218:	b0 91 2f 3c 	lds	r27, 0x3C2F	; 0x803c2f <BuzzerCounter+0x3>
 21c:	80 fd       	sbrc	r24, 0
 21e:	43 c0       	rjmp	.+134    	; 0x2a6 <__EEPROM_REGION_LENGTH__+0x1a6>
				PORTD.OUT ^= (1<<BUZZER);
 220:	e0 e6       	ldi	r30, 0x60	; 96
 222:	f4 e0       	ldi	r31, 0x04	; 4
 224:	84 81       	ldd	r24, Z+4	; 0x04
 226:	80 58       	subi	r24, 0x80	; 128
 228:	84 83       	std	Z+4, r24	; 0x04
 22a:	08 95       	ret
			}
			break;
		case(DEC_SOUND):
			if(BuzzerCounter%10==0){
 22c:	60 91 2c 3c 	lds	r22, 0x3C2C	; 0x803c2c <BuzzerCounter>
 230:	70 91 2d 3c 	lds	r23, 0x3C2D	; 0x803c2d <BuzzerCounter+0x1>
 234:	80 91 2e 3c 	lds	r24, 0x3C2E	; 0x803c2e <BuzzerCounter+0x2>
 238:	90 91 2f 3c 	lds	r25, 0x3C2F	; 0x803c2f <BuzzerCounter+0x3>
 23c:	2a e0       	ldi	r18, 0x0A	; 10
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	50 e0       	ldi	r21, 0x00	; 0
 244:	52 d6       	rcall	.+3236   	; 0xeea <__divmodsi4>
 246:	67 2b       	or	r22, r23
 248:	68 2b       	or	r22, r24
 24a:	69 2b       	or	r22, r25
 24c:	61 f5       	brne	.+88     	; 0x2a6 <__EEPROM_REGION_LENGTH__+0x1a6>
				PORTD.OUT ^= (1<<BUZZER);
 24e:	e0 e6       	ldi	r30, 0x60	; 96
 250:	f4 e0       	ldi	r31, 0x04	; 4
 252:	84 81       	ldd	r24, Z+4	; 0x04
 254:	80 58       	subi	r24, 0x80	; 128
 256:	84 83       	std	Z+4, r24	; 0x04
 258:	08 95       	ret
			break;
		case(LIGHT_SOUND):
		
			break;
		case(DEV_INIT_SOUND):
			if(BuzzerCounter%10==0){
 25a:	60 91 2c 3c 	lds	r22, 0x3C2C	; 0x803c2c <BuzzerCounter>
 25e:	70 91 2d 3c 	lds	r23, 0x3C2D	; 0x803c2d <BuzzerCounter+0x1>
 262:	80 91 2e 3c 	lds	r24, 0x3C2E	; 0x803c2e <BuzzerCounter+0x2>
 266:	90 91 2f 3c 	lds	r25, 0x3C2F	; 0x803c2f <BuzzerCounter+0x3>
 26a:	2a e0       	ldi	r18, 0x0A	; 10
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	3b d6       	rcall	.+3190   	; 0xeea <__divmodsi4>
 274:	67 2b       	or	r22, r23
 276:	68 2b       	or	r22, r24
 278:	69 2b       	or	r22, r25
 27a:	a9 f4       	brne	.+42     	; 0x2a6 <__EEPROM_REGION_LENGTH__+0x1a6>
				PORTD.OUT ^= (1<<BUZZER);
 27c:	e0 e6       	ldi	r30, 0x60	; 96
 27e:	f4 e0       	ldi	r31, 0x04	; 4
 280:	84 81       	ldd	r24, Z+4	; 0x04
 282:	80 58       	subi	r24, 0x80	; 128
 284:	84 83       	std	Z+4, r24	; 0x04
 286:	08 95       	ret
			}
			break;
		case(DEV_MODE_SOUND):
			if(BuzzerCounter%2==0){
 288:	80 91 2c 3c 	lds	r24, 0x3C2C	; 0x803c2c <BuzzerCounter>
 28c:	90 91 2d 3c 	lds	r25, 0x3C2D	; 0x803c2d <BuzzerCounter+0x1>
 290:	a0 91 2e 3c 	lds	r26, 0x3C2E	; 0x803c2e <BuzzerCounter+0x2>
 294:	b0 91 2f 3c 	lds	r27, 0x3C2F	; 0x803c2f <BuzzerCounter+0x3>
 298:	80 fd       	sbrc	r24, 0
 29a:	05 c0       	rjmp	.+10     	; 0x2a6 <__EEPROM_REGION_LENGTH__+0x1a6>
				PORTD.OUT ^= (1<<BUZZER);
 29c:	e0 e6       	ldi	r30, 0x60	; 96
 29e:	f4 e0       	ldi	r31, 0x04	; 4
 2a0:	84 81       	ldd	r24, Z+4	; 0x04
 2a2:	80 58       	subi	r24, 0x80	; 128
 2a4:	84 83       	std	Z+4, r24	; 0x04
 2a6:	08 95       	ret

000002a8 <Initialize>:
	//Initialize USART;
	/*
	uart_init(9600);
	sei();*/
	//Initialize LEDs	
	PORTA.DIR = (1<<LED_1) | (1<<LED_2) | (1<<LED_3) | (1<<LED_4) ;
 2a8:	e0 e0       	ldi	r30, 0x00	; 0
 2aa:	f4 e0       	ldi	r31, 0x04	; 4
 2ac:	87 e2       	ldi	r24, 0x27	; 39
 2ae:	80 83       	st	Z, r24
	PORTA.OUT = 0xFF; // Close All LEDs
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
 2b2:	84 83       	std	Z+4, r24	; 0x04
	
	//Initialize Motors
	
	PORTD.DIR = (1<<MOTOR_RELAY_1) | (1<<MOTOR_RELAY_2)  |(1<<MOTOR_RELAY_3) |(1<<MOTOR_RELAY_4);
 2b4:	a0 e6       	ldi	r26, 0x60	; 96
 2b6:	b4 e0       	ldi	r27, 0x04	; 4
 2b8:	84 e7       	ldi	r24, 0x74	; 116
 2ba:	8c 93       	st	X, r24
	PORTD.OUT = 0x00; //Close all motors
 2bc:	14 96       	adiw	r26, 0x04	; 4
 2be:	1c 92       	st	X, r1
 2c0:	14 97       	sbiw	r26, 0x04	; 4
	//Initialize Buzzer
	PORTD.DIR |= (1<<BUZZER);
 2c2:	8c 91       	ld	r24, X
 2c4:	80 68       	ori	r24, 0x80	; 128
 2c6:	8c 93       	st	X, r24
	PORTD.OUT &= ~(1<<BUZZER);
 2c8:	14 96       	adiw	r26, 0x04	; 4
 2ca:	8c 91       	ld	r24, X
 2cc:	14 97       	sbiw	r26, 0x04	; 4
 2ce:	8f 77       	andi	r24, 0x7F	; 127
 2d0:	14 96       	adiw	r26, 0x04	; 4
 2d2:	8c 93       	st	X, r24
	//Initialize IR Receiver
	PORTA.DIR &= ~(1<<IR_INPUT);
 2d4:	80 81       	ld	r24, Z
 2d6:	87 7f       	andi	r24, 0xF7	; 247
 2d8:	80 83       	st	Z, r24
	
	PORTA.PIN3CTRL |= 0b00000011; //SET ISC to 0x3 to have falling edge trigger. ISC is last 3 bits. Set to 011.
 2da:	83 89       	ldd	r24, Z+19	; 0x13
 2dc:	83 60       	ori	r24, 0x03	; 3
 2de:	83 8b       	std	Z+19, r24	; 0x13
	SREG |= (1<<GLOBAL_INT_ENABLE); //Enable Interrupts
 2e0:	8f b7       	in	r24, 0x3f	; 63
 2e2:	80 68       	ori	r24, 0x80	; 128
 2e4:	8f bf       	out	0x3f, r24	; 63
	 /* Enable Global Interrupts */
	

	//Initial state
	State.currentState = OFF;
 2e6:	10 92 39 3c 	sts	0x3C39, r1	; 0x803c39 <State>
	LightState.currentState = OFF;
 2ea:	10 92 34 3c 	sts	0x3C34, r1	; 0x803c34 <LightState>
	NECState.currentState = IDLE;
 2ee:	10 92 3a 3c 	sts	0x3C3A, r1	; 0x803c3a <NECState>
	
	//RTC initialize
	RTC.CLKSEL = RTC_CLKSEL_INT32K_gc;//32.768 kHz RTC
 2f2:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__RODATA_PM_OFFSET__+0x7fc147>
	while (RTC.STATUS > 0); 
 2f6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__RODATA_PM_OFFSET__+0x7fc141>
 2fa:	81 11       	cpse	r24, r1
 2fc:	fc cf       	rjmp	.-8      	; 0x2f6 <Initialize+0x4e>
	RTC.PER = 4;  // 122 us per tick
 2fe:	e0 e4       	ldi	r30, 0x40	; 64
 300:	f1 e0       	ldi	r31, 0x01	; 1
 302:	84 e0       	ldi	r24, 0x04	; 4
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	82 87       	std	Z+10, r24	; 0x0a
 308:	93 87       	std	Z+11, r25	; 0x0b
	RTC.INTCTRL |= RTC_OVF_bm; 
 30a:	82 81       	ldd	r24, Z+2	; 0x02
 30c:	81 60       	ori	r24, 0x01	; 1
 30e:	82 83       	std	Z+2, r24	; 0x02
	RTC.CTRLA = RTC_PRESCALER_DIV1_gc|RTC_RTCEN_bm | RTC_RUNSTDBY_bm;   
 310:	81 e8       	ldi	r24, 0x81	; 129
 312:	80 83       	st	Z, r24
 314:	08 95       	ret

00000316 <VerifyAddress>:
/* First 2 bytes are address decimals. They are "129" and "102" in decimal
We need to verify this decimals, because different remotes can send IR signals also.
This function verifies first two bytes. Returns "1" if the address are true, "0" if false.                                                                   */
/************************************************************************/
bool VerifyAddress(){
	if((command_register & 0xFFFF0000) == ADDRESS_bm)
 316:	80 91 16 3c 	lds	r24, 0x3C16	; 0x803c16 <command_register>
 31a:	90 91 17 3c 	lds	r25, 0x3C17	; 0x803c17 <command_register+0x1>
 31e:	a0 91 18 3c 	lds	r26, 0x3C18	; 0x803c18 <command_register+0x2>
 322:	b0 91 19 3c 	lds	r27, 0x3C19	; 0x803c19 <command_register+0x3>
 326:	88 27       	eor	r24, r24
 328:	99 27       	eor	r25, r25
 32a:	00 97       	sbiw	r24, 0x00	; 0
 32c:	a6 46       	sbci	r26, 0x66	; 102
 32e:	b1 48       	sbci	r27, 0x81	; 129
 330:	11 f4       	brne	.+4      	; 0x336 <VerifyAddress+0x20>
	return true;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	08 95       	ret
	else return false;
 336:	80 e0       	ldi	r24, 0x00	; 0
}
 338:	08 95       	ret

0000033a <GenerateRepeatCode>:
void GenerateRepeatCode(){
	tick_counter=0;
 33a:	10 92 1c 3c 	sts	0x3C1C, r1	; 0x803c1c <tick_counter>
 33e:	10 92 1d 3c 	sts	0x3C1D, r1	; 0x803c1d <tick_counter+0x1>
 342:	10 92 1e 3c 	sts	0x3C1E, r1	; 0x803c1e <tick_counter+0x2>
 346:	10 92 1f 3c 	sts	0x3C1F, r1	; 0x803c1f <tick_counter+0x3>
	hold_flag=1;
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	80 93 10 3c 	sts	0x3C10, r24	; 0x803c10 <hold_flag>
 352:	90 93 11 3c 	sts	0x3C11, r25	; 0x803c11 <hold_flag+0x1>
	if(InputState.currentState==POWER || InputState.currentState==POWER_HOLD){
 356:	80 91 35 3c 	lds	r24, 0x3C35	; 0x803c35 <InputState>
 35a:	82 30       	cpi	r24, 0x02	; 2
 35c:	20 f4       	brcc	.+8      	; 0x366 <GenerateRepeatCode+0x2c>
		InputState.currentState=POWER_HOLD;
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	80 93 35 3c 	sts	0x3C35, r24	; 0x803c35 <InputState>
 364:	08 95       	ret
		
	}
	else if(InputState.currentState==INCREMENT || InputState.currentState==INCREMENT_HOLD){
 366:	9e ef       	ldi	r25, 0xFE	; 254
 368:	98 0f       	add	r25, r24
 36a:	92 30       	cpi	r25, 0x02	; 2
 36c:	20 f4       	brcc	.+8      	; 0x376 <GenerateRepeatCode+0x3c>
		InputState.currentState=INCREMENT_HOLD;
 36e:	83 e0       	ldi	r24, 0x03	; 3
 370:	80 93 35 3c 	sts	0x3C35, r24	; 0x803c35 <InputState>
 374:	08 95       	ret
	}
	else if(InputState.currentState==DECREMENT ||InputState.currentState==DECREMENT_HOLD){
 376:	9c ef       	ldi	r25, 0xFC	; 252
 378:	98 0f       	add	r25, r24
 37a:	92 30       	cpi	r25, 0x02	; 2
 37c:	20 f4       	brcc	.+8      	; 0x386 <GenerateRepeatCode+0x4c>
		InputState.currentState=DECREMENT_HOLD;
 37e:	85 e0       	ldi	r24, 0x05	; 5
 380:	80 93 35 3c 	sts	0x3C35, r24	; 0x803c35 <InputState>
 384:	08 95       	ret
	}
	else if(InputState.currentState==LIGHT || InputState.currentState==LIGHT_HOLD){
 386:	86 50       	subi	r24, 0x06	; 6
 388:	82 30       	cpi	r24, 0x02	; 2
 38a:	18 f4       	brcc	.+6      	; 0x392 <GenerateRepeatCode+0x58>
			InputState.currentState=LIGHT_HOLD;
 38c:	87 e0       	ldi	r24, 0x07	; 7
 38e:	80 93 35 3c 	sts	0x3C35, r24	; 0x803c35 <InputState>
 392:	08 95       	ret

00000394 <disableIR_ISR>:

/************************************************************************/
/* This function disables interrupt for IR receiver                                                                     */
/************************************************************************/
void disableIR_ISR(){
	PORTA.PIN3CTRL &= 0b00000000;
 394:	e0 e0       	ldi	r30, 0x00	; 0
 396:	f4 e0       	ldi	r31, 0x04	; 4
 398:	83 89       	ldd	r24, Z+19	; 0x13
 39a:	13 8a       	std	Z+19, r1	; 0x13
 39c:	08 95       	ret

0000039e <enableIR_ISR>:
}
/************************************************************************/
/* This function enables interrupt for IR Receiver                                                                     */
/************************************************************************/
void enableIR_ISR(){
	PORTA.PIN3CTRL |= 0b00000011;
 39e:	e0 e0       	ldi	r30, 0x00	; 0
 3a0:	f4 e0       	ldi	r31, 0x04	; 4
 3a2:	83 89       	ldd	r24, Z+19	; 0x13
 3a4:	83 60       	ori	r24, 0x03	; 3
 3a6:	83 8b       	std	Z+19, r24	; 0x13
	RTC.CNT = 0;//reset counter
 3a8:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7fc148>
 3ac:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7fc149>
 3b0:	08 95       	ret

000003b2 <disableRTC>:
}
void disableRTC(){
	RTC.CNT = 0;//reset counter
 3b2:	e0 e4       	ldi	r30, 0x40	; 64
 3b4:	f1 e0       	ldi	r31, 0x01	; 1
 3b6:	10 86       	std	Z+8, r1	; 0x08
 3b8:	11 86       	std	Z+9, r1	; 0x09
	RTC.INTCTRL &= ~RTC_OVF_bm;
 3ba:	82 81       	ldd	r24, Z+2	; 0x02
 3bc:	8e 7f       	andi	r24, 0xFE	; 254
 3be:	82 83       	std	Z+2, r24	; 0x02
	tick_counter = 0;
 3c0:	10 92 1c 3c 	sts	0x3C1C, r1	; 0x803c1c <tick_counter>
 3c4:	10 92 1d 3c 	sts	0x3C1D, r1	; 0x803c1d <tick_counter+0x1>
 3c8:	10 92 1e 3c 	sts	0x3C1E, r1	; 0x803c1e <tick_counter+0x2>
 3cc:	10 92 1f 3c 	sts	0x3C1F, r1	; 0x803c1f <tick_counter+0x3>
 3d0:	08 95       	ret

000003d2 <enableRTC>:
}
void enableRTC(){
	RTC.INTCTRL |= RTC_OVF_bm;
 3d2:	e0 e4       	ldi	r30, 0x40	; 64
 3d4:	f1 e0       	ldi	r31, 0x01	; 1
 3d6:	82 81       	ldd	r24, Z+2	; 0x02
 3d8:	81 60       	ori	r24, 0x01	; 1
 3da:	82 83       	std	Z+2, r24	; 0x02
 3dc:	08 95       	ret

000003de <DevModeBlink>:
	
	 
}
void DevModeBlink(){
	switch(DevModeLightState.currentState){
 3de:	80 91 3b 3c 	lds	r24, 0x3C3B	; 0x803c3b <DevModeLightState>
 3e2:	81 30       	cpi	r24, 0x01	; 1
 3e4:	89 f0       	breq	.+34     	; 0x408 <__DATA_REGION_LENGTH__+0x8>
 3e6:	28 f0       	brcs	.+10     	; 0x3f2 <DevModeBlink+0x14>
 3e8:	82 30       	cpi	r24, 0x02	; 2
 3ea:	c9 f0       	breq	.+50     	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
 3ec:	83 30       	cpi	r24, 0x03	; 3
 3ee:	11 f1       	breq	.+68     	; 0x434 <__DATA_REGION_LENGTH__+0x34>
 3f0:	2b c0       	rjmp	.+86     	; 0x448 <__DATA_REGION_LENGTH__+0x48>
		case(DEV_ONE):
			PORTA.OUT = 0xFF;
 3f2:	e0 e0       	ldi	r30, 0x00	; 0
 3f4:	f4 e0       	ldi	r31, 0x04	; 4
 3f6:	8f ef       	ldi	r24, 0xFF	; 255
 3f8:	84 83       	std	Z+4, r24	; 0x04
			PORTA.OUT &= ~(1<<LED_1) & ~(1<<LED_2);
 3fa:	84 81       	ldd	r24, Z+4	; 0x04
 3fc:	8a 7f       	andi	r24, 0xFA	; 250
 3fe:	84 83       	std	Z+4, r24	; 0x04
			DevModeLightState.currentState = DEV_TWO;
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	80 93 3b 3c 	sts	0x3C3B, r24	; 0x803c3b <DevModeLightState>
		break;
 406:	08 95       	ret
		case(DEV_TWO):
			PORTA.OUT = 0xFF;
 408:	e0 e0       	ldi	r30, 0x00	; 0
 40a:	f4 e0       	ldi	r31, 0x04	; 4
 40c:	8f ef       	ldi	r24, 0xFF	; 255
 40e:	84 83       	std	Z+4, r24	; 0x04
			PORTA.OUT &= ~(1<<LED_2) & ~(1<<LED_3);
 410:	84 81       	ldd	r24, Z+4	; 0x04
 412:	89 7f       	andi	r24, 0xF9	; 249
 414:	84 83       	std	Z+4, r24	; 0x04
			DevModeLightState.currentState = DEV_THREE;
 416:	82 e0       	ldi	r24, 0x02	; 2
 418:	80 93 3b 3c 	sts	0x3C3B, r24	; 0x803c3b <DevModeLightState>
			break;
 41c:	08 95       	ret
		case(DEV_THREE):
			PORTA.OUT = 0xFF;
 41e:	e0 e0       	ldi	r30, 0x00	; 0
 420:	f4 e0       	ldi	r31, 0x04	; 4
 422:	8f ef       	ldi	r24, 0xFF	; 255
 424:	84 83       	std	Z+4, r24	; 0x04
			PORTA.OUT &= ~(1<<LED_3) & ~(1<<LED_4);
 426:	84 81       	ldd	r24, Z+4	; 0x04
 428:	8d 7d       	andi	r24, 0xDD	; 221
 42a:	84 83       	std	Z+4, r24	; 0x04
			DevModeLightState.currentState = DEV_FOUR;
 42c:	83 e0       	ldi	r24, 0x03	; 3
 42e:	80 93 3b 3c 	sts	0x3C3B, r24	; 0x803c3b <DevModeLightState>
			break;
 432:	08 95       	ret
		case(DEV_FOUR):
			PORTA.OUT = 0xFF;
 434:	e0 e0       	ldi	r30, 0x00	; 0
 436:	f4 e0       	ldi	r31, 0x04	; 4
 438:	8f ef       	ldi	r24, 0xFF	; 255
 43a:	84 83       	std	Z+4, r24	; 0x04
			PORTA.OUT &= ~(1<<LED_1) & ~(1<<LED_4);
 43c:	84 81       	ldd	r24, Z+4	; 0x04
 43e:	8e 7d       	andi	r24, 0xDE	; 222
 440:	84 83       	std	Z+4, r24	; 0x04
			DevModeLightState.currentState = DEV_ONE;	
 442:	10 92 3b 3c 	sts	0x3C3B, r1	; 0x803c3b <DevModeLightState>
			break;
 446:	08 95       	ret
		default:
			DevModeLightState.currentState = DEV_ONE;
 448:	10 92 3b 3c 	sts	0x3C3B, r1	; 0x803c3b <DevModeLightState>
			PORTA.OUT = 0xFF;
 44c:	e0 e0       	ldi	r30, 0x00	; 0
 44e:	f4 e0       	ldi	r31, 0x04	; 4
 450:	8f ef       	ldi	r24, 0xFF	; 255
 452:	84 83       	std	Z+4, r24	; 0x04
			PORTA.OUT &= ~(1<<LED_1) & ~(1<<LED_4);
 454:	84 81       	ldd	r24, Z+4	; 0x04
 456:	8e 7d       	andi	r24, 0xDE	; 222
 458:	84 83       	std	Z+4, r24	; 0x04
 45a:	08 95       	ret

0000045c <setState>:
	}
}

void setState(){
	
	switch(State.currentState){
 45c:	80 91 39 3c 	lds	r24, 0x3C39	; 0x803c39 <State>
 460:	82 30       	cpi	r24, 0x02	; 2
 462:	59 f1       	breq	.+86     	; 0x4ba <setState+0x5e>
 464:	28 f4       	brcc	.+10     	; 0x470 <setState+0x14>
 466:	88 23       	and	r24, r24
 468:	59 f0       	breq	.+22     	; 0x480 <setState+0x24>
 46a:	81 30       	cpi	r24, 0x01	; 1
 46c:	b9 f0       	breq	.+46     	; 0x49c <setState+0x40>
 46e:	5a c0       	rjmp	.+180    	; 0x524 <setState+0xc8>
 470:	84 30       	cpi	r24, 0x04	; 4
 472:	09 f4       	brne	.+2      	; 0x476 <setState+0x1a>
 474:	48 c0       	rjmp	.+144    	; 0x506 <setState+0xaa>
 476:	80 f1       	brcs	.+96     	; 0x4d8 <setState+0x7c>
 478:	85 30       	cpi	r24, 0x05	; 5
 47a:	09 f4       	brne	.+2      	; 0x47e <setState+0x22>
 47c:	51 c0       	rjmp	.+162    	; 0x520 <setState+0xc4>
 47e:	52 c0       	rjmp	.+164    	; 0x524 <setState+0xc8>
		case(OFF):
			PORTA.OUT = 0xFF; // All LEDs OFF
 480:	8f ef       	ldi	r24, 0xFF	; 255
 482:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__RODATA_PM_OFFSET__+0x7fc404>
			PORTD.OUT = 0x00; // All MOTORs OFF
 486:	10 92 64 04 	sts	0x0464, r1	; 0x800464 <__RODATA_PM_OFFSET__+0x7fc464>
			boost_total_timer = 0;//Coming from BOOST state, reset boost timer.
 48a:	10 92 08 3c 	sts	0x3C08, r1	; 0x803c08 <boost_total_timer>
 48e:	10 92 09 3c 	sts	0x3C09, r1	; 0x803c09 <boost_total_timer+0x1>
 492:	10 92 0a 3c 	sts	0x3C0A, r1	; 0x803c0a <boost_total_timer+0x2>
 496:	10 92 0b 3c 	sts	0x3C0B, r1	; 0x803c0b <boost_total_timer+0x3>
			break;
 49a:	08 95       	ret
		case(ONE):
			//Only LED_1 is on.
			PORTA.OUT = 0xFF;
 49c:	e0 e0       	ldi	r30, 0x00	; 0
 49e:	f4 e0       	ldi	r31, 0x04	; 4
 4a0:	8f ef       	ldi	r24, 0xFF	; 255
 4a2:	84 83       	std	Z+4, r24	; 0x04
			PORTA.OUT &= ~(1<<LED_1);
 4a4:	84 81       	ldd	r24, Z+4	; 0x04
 4a6:	8e 7f       	andi	r24, 0xFE	; 254
 4a8:	84 83       	std	Z+4, r24	; 0x04
			
			PORTD.OUT &= ~(0<<MOTOR_RELAY_2);//CLOSE MOTOR_2
 4aa:	e0 e6       	ldi	r30, 0x60	; 96
 4ac:	f4 e0       	ldi	r31, 0x04	; 4
 4ae:	84 81       	ldd	r24, Z+4	; 0x04
 4b0:	84 83       	std	Z+4, r24	; 0x04
			PORTD.OUT |= (1<<MOTOR_RELAY_1);//OPEN MOTOR_1
 4b2:	84 81       	ldd	r24, Z+4	; 0x04
 4b4:	80 64       	ori	r24, 0x40	; 64
 4b6:	84 83       	std	Z+4, r24	; 0x04
			break;
 4b8:	08 95       	ret
		case(TWO):
			//LEDs 1-2 are on.
			PORTA.OUT = 0xFF;
 4ba:	e0 e0       	ldi	r30, 0x00	; 0
 4bc:	f4 e0       	ldi	r31, 0x04	; 4
 4be:	8f ef       	ldi	r24, 0xFF	; 255
 4c0:	84 83       	std	Z+4, r24	; 0x04
			PORTA.OUT &= ~(1<<LED_1) & ~(1<<LED_2);
 4c2:	84 81       	ldd	r24, Z+4	; 0x04
 4c4:	8a 7f       	andi	r24, 0xFA	; 250
 4c6:	84 83       	std	Z+4, r24	; 0x04
			
			PORTD.OUT &= ~(0<<MOTOR_RELAY_3);//CLOSE MOTOR_3
 4c8:	e0 e6       	ldi	r30, 0x60	; 96
 4ca:	f4 e0       	ldi	r31, 0x04	; 4
 4cc:	84 81       	ldd	r24, Z+4	; 0x04
 4ce:	84 83       	std	Z+4, r24	; 0x04
			PORTD.OUT |= (1<<MOTOR_RELAY_2);//OPEN MOTOR_2
 4d0:	84 81       	ldd	r24, Z+4	; 0x04
 4d2:	80 62       	ori	r24, 0x20	; 32
 4d4:	84 83       	std	Z+4, r24	; 0x04
			
			break;
 4d6:	08 95       	ret
		case(THREE):
			//LEDs 1-2-3 are on.
			boost_total_timer = 0; // Coming from BOOST state, reset boost timer.
 4d8:	10 92 08 3c 	sts	0x3C08, r1	; 0x803c08 <boost_total_timer>
 4dc:	10 92 09 3c 	sts	0x3C09, r1	; 0x803c09 <boost_total_timer+0x1>
 4e0:	10 92 0a 3c 	sts	0x3C0A, r1	; 0x803c0a <boost_total_timer+0x2>
 4e4:	10 92 0b 3c 	sts	0x3C0B, r1	; 0x803c0b <boost_total_timer+0x3>
			PORTA.OUT = 0xFF;
 4e8:	e0 e0       	ldi	r30, 0x00	; 0
 4ea:	f4 e0       	ldi	r31, 0x04	; 4
 4ec:	8f ef       	ldi	r24, 0xFF	; 255
 4ee:	84 83       	std	Z+4, r24	; 0x04
			PORTA.OUT &= ~(1<<LED_1) & ~(1<<LED_2) & ~(1<<LED_3);
 4f0:	84 81       	ldd	r24, Z+4	; 0x04
 4f2:	88 7f       	andi	r24, 0xF8	; 248
 4f4:	84 83       	std	Z+4, r24	; 0x04
			
			PORTD.OUT &= ~(0<<MOTOR_RELAY_4);//CLOSE MOTOR_4
 4f6:	e0 e6       	ldi	r30, 0x60	; 96
 4f8:	f4 e0       	ldi	r31, 0x04	; 4
 4fa:	84 81       	ldd	r24, Z+4	; 0x04
 4fc:	84 83       	std	Z+4, r24	; 0x04
			PORTD.OUT |= (1<<MOTOR_RELAY_3);//OPEN MOTOR_3
 4fe:	84 81       	ldd	r24, Z+4	; 0x04
 500:	80 61       	ori	r24, 0x10	; 16
 502:	84 83       	std	Z+4, r24	; 0x04
			
			//
			break;
 504:	08 95       	ret
		case(BOOST):
			//LEDs 1-2-3-4 are on. After 15 min, go to state THREE.
			PORTA.OUT = 0xFF;
 506:	e0 e0       	ldi	r30, 0x00	; 0
 508:	f4 e0       	ldi	r31, 0x04	; 4
 50a:	8f ef       	ldi	r24, 0xFF	; 255
 50c:	84 83       	std	Z+4, r24	; 0x04
			PORTA.OUT &= ~(1<<LED_1) & ~ (1<<LED_2) & ~ (1<<LED_3) & ~(1<<LED_4);
 50e:	84 81       	ldd	r24, Z+4	; 0x04
 510:	88 7d       	andi	r24, 0xD8	; 216
 512:	84 83       	std	Z+4, r24	; 0x04
			
			PORTD.OUT |= (1<<MOTOR_RELAY_4);//OPEN MOTOR_4
 514:	e0 e6       	ldi	r30, 0x60	; 96
 516:	f4 e0       	ldi	r31, 0x04	; 4
 518:	84 81       	ldd	r24, Z+4	; 0x04
 51a:	84 60       	ori	r24, 0x04	; 4
 51c:	84 83       	std	Z+4, r24	; 0x04
			break;
 51e:	08 95       	ret
		case(DEV_MODE):
				DevModeBlink();
 520:	5e df       	rcall	.-324    	; 0x3de <DevModeBlink>
			break;
 522:	08 95       	ret
		default:
			State.currentState = ONE; // In case of errors or out of state machine, go to state one.
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	80 93 39 3c 	sts	0x3C39, r24	; 0x803c39 <State>
 52a:	08 95       	ret

0000052c <WriteInput>:
/************************************************************************/
/* This function changes the State of the system according to the input from the controller                                                                     */
/************************************************************************/
void WriteInput(){
	
	switch(InputState.currentState){
 52c:	80 91 35 3c 	lds	r24, 0x3C35	; 0x803c35 <InputState>
 530:	82 30       	cpi	r24, 0x02	; 2
 532:	e1 f0       	breq	.+56     	; 0x56c <WriteInput+0x40>
 534:	18 f4       	brcc	.+6      	; 0x53c <WriteInput+0x10>
 536:	88 23       	and	r24, r24
 538:	39 f0       	breq	.+14     	; 0x548 <WriteInput+0x1c>
 53a:	08 95       	ret
 53c:	84 30       	cpi	r24, 0x04	; 4
 53e:	71 f1       	breq	.+92     	; 0x59c <WriteInput+0x70>
 540:	86 30       	cpi	r24, 0x06	; 6
 542:	09 f4       	brne	.+2      	; 0x546 <WriteInput+0x1a>
 544:	43 c0       	rjmp	.+134    	; 0x5cc <WriteInput+0xa0>
 546:	08 95       	ret
		case(POWER):
			if(State.currentState == OFF){
 548:	80 91 39 3c 	lds	r24, 0x3C39	; 0x803c39 <State>
 54c:	81 11       	cpse	r24, r1
 54e:	07 c0       	rjmp	.+14     	; 0x55e <WriteInput+0x32>
				State.currentState = ONE;
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	80 93 39 3c 	sts	0x3C39, r24	; 0x803c39 <State>
				BuzzerState.currentState= POWER_ON_SOUND;
 556:	10 92 3c 3c 	sts	0x3C3C, r1	; 0x803c3c <BuzzerState>
				Buzzer();
 55a:	b6 dd       	rcall	.-1172   	; 0xc8 <Buzzer>
 55c:	08 95       	ret
			}
			else{
				State.currentState = OFF;
 55e:	10 92 39 3c 	sts	0x3C39, r1	; 0x803c39 <State>
				BuzzerState.currentState= POWER_OFF_SOUND;
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	80 93 3c 3c 	sts	0x3C3C, r24	; 0x803c3c <BuzzerState>
				Buzzer();
 568:	af dd       	rcall	.-1186   	; 0xc8 <Buzzer>
 56a:	08 95       	ret
			}
			break;
		case(INCREMENT):
			BuzzerState.currentState= INC_SOUND;
 56c:	82 e0       	ldi	r24, 0x02	; 2
 56e:	80 93 3c 3c 	sts	0x3C3C, r24	; 0x803c3c <BuzzerState>
			Buzzer();
 572:	aa dd       	rcall	.-1196   	; 0xc8 <Buzzer>
			if(State.currentState==ONE){
 574:	80 91 39 3c 	lds	r24, 0x3C39	; 0x803c39 <State>
 578:	81 30       	cpi	r24, 0x01	; 1
 57a:	21 f4       	brne	.+8      	; 0x584 <WriteInput+0x58>
				State.currentState = TWO;
 57c:	82 e0       	ldi	r24, 0x02	; 2
 57e:	80 93 39 3c 	sts	0x3C39, r24	; 0x803c39 <State>
 582:	08 95       	ret
			}
			else if(State.currentState == TWO){
 584:	82 30       	cpi	r24, 0x02	; 2
 586:	21 f4       	brne	.+8      	; 0x590 <WriteInput+0x64>
				State.currentState=THREE;
 588:	83 e0       	ldi	r24, 0x03	; 3
 58a:	80 93 39 3c 	sts	0x3C39, r24	; 0x803c39 <State>
 58e:	08 95       	ret
			}
			else if(State.currentState == THREE) {
 590:	83 30       	cpi	r24, 0x03	; 3
 592:	31 f5       	brne	.+76     	; 0x5e0 <WriteInput+0xb4>
				State.currentState = BOOST;
 594:	84 e0       	ldi	r24, 0x04	; 4
 596:	80 93 39 3c 	sts	0x3C39, r24	; 0x803c39 <State>
 59a:	08 95       	ret
			}
			break;
		case(DECREMENT):
			BuzzerState.currentState= DEC_SOUND;
 59c:	83 e0       	ldi	r24, 0x03	; 3
 59e:	80 93 3c 3c 	sts	0x3C3C, r24	; 0x803c3c <BuzzerState>
			Buzzer();
 5a2:	92 dd       	rcall	.-1244   	; 0xc8 <Buzzer>
			if(State.currentState==BOOST){
 5a4:	80 91 39 3c 	lds	r24, 0x3C39	; 0x803c39 <State>
 5a8:	84 30       	cpi	r24, 0x04	; 4
 5aa:	21 f4       	brne	.+8      	; 0x5b4 <WriteInput+0x88>
				State.currentState = THREE;
 5ac:	83 e0       	ldi	r24, 0x03	; 3
 5ae:	80 93 39 3c 	sts	0x3C39, r24	; 0x803c39 <State>
 5b2:	08 95       	ret
			}
			else if(State.currentState == THREE){
 5b4:	83 30       	cpi	r24, 0x03	; 3
 5b6:	21 f4       	brne	.+8      	; 0x5c0 <WriteInput+0x94>
				State.currentState=TWO;
 5b8:	82 e0       	ldi	r24, 0x02	; 2
 5ba:	80 93 39 3c 	sts	0x3C39, r24	; 0x803c39 <State>
 5be:	08 95       	ret
			}
			else if(State.currentState == TWO) {
 5c0:	82 30       	cpi	r24, 0x02	; 2
 5c2:	71 f4       	brne	.+28     	; 0x5e0 <WriteInput+0xb4>
				State.currentState = ONE;
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	80 93 39 3c 	sts	0x3C39, r24	; 0x803c39 <State>
 5ca:	08 95       	ret
			}
			break;
		case(LIGHT):
			if(LightState.currentState == LIGHT_ON){
 5cc:	80 91 34 3c 	lds	r24, 0x3C34	; 0x803c34 <LightState>
 5d0:	81 11       	cpse	r24, r1
 5d2:	04 c0       	rjmp	.+8      	; 0x5dc <WriteInput+0xb0>
				LightState.currentState=LIGHT_OFF;
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	80 93 34 3c 	sts	0x3C34, r24	; 0x803c34 <LightState>
 5da:	08 95       	ret
			}
			else{
				LightState.currentState=LIGHT_ON;
 5dc:	10 92 34 3c 	sts	0x3C34, r1	; 0x803c34 <LightState>
 5e0:	08 95       	ret

000005e2 <DecodeCommand>:
/* This functions decodes incoming command. There are 4 different commands which are;
POWER, INCREMENT, DECREMENT and  LIGHT. There can also be REPEAT code which happens when the button 
is held down.Functions changes the current state of InputState instance.                                                                     */
/************************************************************************/
void DecodeCommand(){
	if((command_register&0x0000FFFF)==IR_POWER_bm){
 5e2:	80 91 16 3c 	lds	r24, 0x3C16	; 0x803c16 <command_register>
 5e6:	90 91 17 3c 	lds	r25, 0x3C17	; 0x803c17 <command_register+0x1>
 5ea:	a0 91 18 3c 	lds	r26, 0x3C18	; 0x803c18 <command_register+0x2>
 5ee:	b0 91 19 3c 	lds	r27, 0x3C19	; 0x803c19 <command_register+0x3>
 5f2:	aa 27       	eor	r26, r26
 5f4:	bb 27       	eor	r27, r27
 5f6:	8e 37       	cpi	r24, 0x7E	; 126
 5f8:	91 48       	sbci	r25, 0x81	; 129
 5fa:	a1 05       	cpc	r26, r1
 5fc:	b1 05       	cpc	r27, r1
 5fe:	29 f4       	brne	.+10     	; 0x60a <DecodeCommand+0x28>
		InputState.currentState = POWER;
 600:	10 92 35 3c 	sts	0x3C35, r1	; 0x803c35 <InputState>
		WriteInput();
 604:	93 df       	rcall	.-218    	; 0x52c <WriteInput>
		setState();
 606:	2a df       	rcall	.-428    	; 0x45c <setState>
		return;
 608:	08 95       	ret
	}
	else if((command_register&0x0000FFFF)==IR_MINUS_bm){
 60a:	80 91 16 3c 	lds	r24, 0x3C16	; 0x803c16 <command_register>
 60e:	90 91 17 3c 	lds	r25, 0x3C17	; 0x803c17 <command_register+0x1>
 612:	a0 91 18 3c 	lds	r26, 0x3C18	; 0x803c18 <command_register+0x2>
 616:	b0 91 19 3c 	lds	r27, 0x3C19	; 0x803c19 <command_register+0x3>
 61a:	aa 27       	eor	r26, r26
 61c:	bb 27       	eor	r27, r27
 61e:	8e 3a       	cpi	r24, 0xAE	; 174
 620:	91 45       	sbci	r25, 0x51	; 81
 622:	a1 05       	cpc	r26, r1
 624:	b1 05       	cpc	r27, r1
 626:	31 f4       	brne	.+12     	; 0x634 <DecodeCommand+0x52>
		InputState.currentState = DECREMENT;
 628:	84 e0       	ldi	r24, 0x04	; 4
 62a:	80 93 35 3c 	sts	0x3C35, r24	; 0x803c35 <InputState>
		WriteInput();
 62e:	7e df       	rcall	.-260    	; 0x52c <WriteInput>
		setState();
 630:	15 df       	rcall	.-470    	; 0x45c <setState>
		return;
 632:	08 95       	ret
	}
	else if ((command_register&0x0000FFFF)==IR_PLUS_bm){
 634:	80 91 16 3c 	lds	r24, 0x3C16	; 0x803c16 <command_register>
 638:	90 91 17 3c 	lds	r25, 0x3C17	; 0x803c17 <command_register+0x1>
 63c:	a0 91 18 3c 	lds	r26, 0x3C18	; 0x803c18 <command_register+0x2>
 640:	b0 91 19 3c 	lds	r27, 0x3C19	; 0x803c19 <command_register+0x3>
 644:	aa 27       	eor	r26, r26
 646:	bb 27       	eor	r27, r27
 648:	8e 35       	cpi	r24, 0x5E	; 94
 64a:	91 4a       	sbci	r25, 0xA1	; 161
 64c:	a1 05       	cpc	r26, r1
 64e:	b1 05       	cpc	r27, r1
 650:	31 f4       	brne	.+12     	; 0x65e <DecodeCommand+0x7c>
		InputState.currentState = INCREMENT;
 652:	82 e0       	ldi	r24, 0x02	; 2
 654:	80 93 35 3c 	sts	0x3C35, r24	; 0x803c35 <InputState>
		WriteInput();
 658:	69 df       	rcall	.-302    	; 0x52c <WriteInput>
		setState();
 65a:	00 df       	rcall	.-512    	; 0x45c <setState>
		return;
 65c:	08 95       	ret
	}
	else if((command_register&0x0000FFFF)==IR_LIGHT_bm){
 65e:	80 91 16 3c 	lds	r24, 0x3C16	; 0x803c16 <command_register>
 662:	90 91 17 3c 	lds	r25, 0x3C17	; 0x803c17 <command_register+0x1>
 666:	a0 91 18 3c 	lds	r26, 0x3C18	; 0x803c18 <command_register+0x2>
 66a:	b0 91 19 3c 	lds	r27, 0x3C19	; 0x803c19 <command_register+0x3>
 66e:	aa 27       	eor	r26, r26
 670:	bb 27       	eor	r27, r27
 672:	86 36       	cpi	r24, 0x66	; 102
 674:	99 49       	sbci	r25, 0x99	; 153
 676:	a1 05       	cpc	r26, r1
 678:	b1 05       	cpc	r27, r1
 67a:	29 f4       	brne	.+10     	; 0x686 <DecodeCommand+0xa4>
		InputState.currentState = LIGHT;
 67c:	86 e0       	ldi	r24, 0x06	; 6
 67e:	80 93 35 3c 	sts	0x3C35, r24	; 0x803c35 <InputState>
		WriteInput();
 682:	54 df       	rcall	.-344    	; 0x52c <WriteInput>
		setState();
 684:	eb de       	rcall	.-554    	; 0x45c <setState>
 686:	08 95       	ret

00000688 <IR_Read>:
state of the INPUT_STATE                                                                    */
/************************************************************************/
//IR Read function to decode incoming signal.
void IR_Read(){
	//If the signal is HIGH for 9ms, this means we are in START.
	switch(NECState.currentState){
 688:	80 91 3a 3c 	lds	r24, 0x3C3A	; 0x803c3a <NECState>
 68c:	82 30       	cpi	r24, 0x02	; 2
 68e:	21 f0       	breq	.+8      	; 0x698 <IR_Read+0x10>
 690:	83 30       	cpi	r24, 0x03	; 3
 692:	09 f4       	brne	.+2      	; 0x696 <IR_Read+0xe>
 694:	f7 c1       	rjmp	.+1006   	; 0xa84 <IR_Read+0x3fc>
 696:	08 95       	ret
			
		case(COMMAND):
		
			idle_flag=1;
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	80 93 22 3c 	sts	0x3C22, r24	; 0x803c22 <idle_flag>
 6a0:	90 93 23 3c 	sts	0x3C23, r25	; 0x803c23 <idle_flag+0x1>
			cli();
 6a4:	f8 94       	cli
			RTC.CNT = 0;
 6a6:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7fc148>
 6aa:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7fc149>
			sei();
 6ae:	78 94       	sei
			//start timer
			
			disableIR_ISR();
 6b0:	71 de       	rcall	.-798    	; 0x394 <disableIR_ISR>
			while(((PORTA.IN & (1<<IR_INPUT)) == 0)&& counter*RTC_TICK <= 9000){
 6b2:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__RODATA_PM_OFFSET__+0x7fc408>
 6b6:	83 fd       	sbrc	r24, 3
 6b8:	10 c0       	rjmp	.+32     	; 0x6da <IR_Read+0x52>
 6ba:	20 91 24 3c 	lds	r18, 0x3C24	; 0x803c24 <counter>
 6be:	30 91 25 3c 	lds	r19, 0x3C25	; 0x803c25 <counter+0x1>
 6c2:	40 91 26 3c 	lds	r20, 0x3C26	; 0x803c26 <counter+0x2>
 6c6:	50 91 27 3c 	lds	r21, 0x3C27	; 0x803c27 <counter+0x3>
 6ca:	aa e7       	ldi	r26, 0x7A	; 122
 6cc:	b0 e0       	ldi	r27, 0x00	; 0
 6ce:	29 d4       	rcall	.+2130   	; 0xf22 <__muluhisi3>
 6d0:	69 32       	cpi	r22, 0x29	; 41
 6d2:	73 42       	sbci	r23, 0x23	; 35
 6d4:	81 05       	cpc	r24, r1
 6d6:	91 05       	cpc	r25, r1
 6d8:	64 f3       	brlt	.-40     	; 0x6b2 <IR_Read+0x2a>
				
			}
			counter = 0;
 6da:	10 92 24 3c 	sts	0x3C24, r1	; 0x803c24 <counter>
 6de:	10 92 25 3c 	sts	0x3C25, r1	; 0x803c25 <counter+0x1>
 6e2:	10 92 26 3c 	sts	0x3C26, r1	; 0x803c26 <counter+0x2>
 6e6:	10 92 27 3c 	sts	0x3C27, r1	; 0x803c27 <counter+0x3>
			cli();
 6ea:	f8 94       	cli
			RTC.CNT = 0;
 6ec:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7fc148>
 6f0:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7fc149>
			sei();
 6f4:	78 94       	sei
			
			while(!((PORTA.IN & (1<<IR_INPUT)) == 0)&& counter*RTC_TICK <= 4500){
 6f6:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__RODATA_PM_OFFSET__+0x7fc408>
 6fa:	83 ff       	sbrs	r24, 3
 6fc:	10 c0       	rjmp	.+32     	; 0x71e <IR_Read+0x96>
 6fe:	20 91 24 3c 	lds	r18, 0x3C24	; 0x803c24 <counter>
 702:	30 91 25 3c 	lds	r19, 0x3C25	; 0x803c25 <counter+0x1>
 706:	40 91 26 3c 	lds	r20, 0x3C26	; 0x803c26 <counter+0x2>
 70a:	50 91 27 3c 	lds	r21, 0x3C27	; 0x803c27 <counter+0x3>
 70e:	aa e7       	ldi	r26, 0x7A	; 122
 710:	b0 e0       	ldi	r27, 0x00	; 0
 712:	07 d4       	rcall	.+2062   	; 0xf22 <__muluhisi3>
 714:	65 39       	cpi	r22, 0x95	; 149
 716:	71 41       	sbci	r23, 0x11	; 17
 718:	81 05       	cpc	r24, r1
 71a:	91 05       	cpc	r25, r1
 71c:	64 f3       	brlt	.-40     	; 0x6f6 <IR_Read+0x6e>
				
			}
			if(counter*RTC_TICK <= 2300){
 71e:	20 91 24 3c 	lds	r18, 0x3C24	; 0x803c24 <counter>
 722:	30 91 25 3c 	lds	r19, 0x3C25	; 0x803c25 <counter+0x1>
 726:	40 91 26 3c 	lds	r20, 0x3C26	; 0x803c26 <counter+0x2>
 72a:	50 91 27 3c 	lds	r21, 0x3C27	; 0x803c27 <counter+0x3>
 72e:	aa e7       	ldi	r26, 0x7A	; 122
 730:	b0 e0       	ldi	r27, 0x00	; 0
 732:	f7 d3       	rcall	.+2030   	; 0xf22 <__muluhisi3>
 734:	6d 3f       	cpi	r22, 0xFD	; 253
 736:	78 40       	sbci	r23, 0x08	; 8
 738:	81 05       	cpc	r24, r1
 73a:	91 05       	cpc	r25, r1
 73c:	0c f0       	brlt	.+2      	; 0x740 <IR_Read+0xb8>
 73e:	41 c0       	rjmp	.+130    	; 0x7c2 <IR_Read+0x13a>
				//Repeat Case
				counter = 0;
 740:	10 92 24 3c 	sts	0x3C24, r1	; 0x803c24 <counter>
 744:	10 92 25 3c 	sts	0x3C25, r1	; 0x803c25 <counter+0x1>
 748:	10 92 26 3c 	sts	0x3C26, r1	; 0x803c26 <counter+0x2>
 74c:	10 92 27 3c 	sts	0x3C27, r1	; 0x803c27 <counter+0x3>
				disableRTC();//reset timer
 750:	30 de       	rcall	.-928    	; 0x3b2 <disableRTC>
				enableRTC();
 752:	3f de       	rcall	.-898    	; 0x3d2 <enableRTC>
				cli();
 754:	f8 94       	cli
				RTC.CNT = 0;
 756:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7fc148>
 75a:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7fc149>
				sei();
 75e:	78 94       	sei
				counter = 0;
 760:	10 92 24 3c 	sts	0x3C24, r1	; 0x803c24 <counter>
 764:	10 92 25 3c 	sts	0x3C25, r1	; 0x803c25 <counter+0x1>
 768:	10 92 26 3c 	sts	0x3C26, r1	; 0x803c26 <counter+0x2>
 76c:	10 92 27 3c 	sts	0x3C27, r1	; 0x803c27 <counter+0x3>
				while(((PORTA.IN & (1<<IR_INPUT)) == 0)&& counter*RTC_TICK <= 600){
 770:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__RODATA_PM_OFFSET__+0x7fc408>
 774:	83 fd       	sbrc	r24, 3
 776:	10 c0       	rjmp	.+32     	; 0x798 <IR_Read+0x110>
 778:	20 91 24 3c 	lds	r18, 0x3C24	; 0x803c24 <counter>
 77c:	30 91 25 3c 	lds	r19, 0x3C25	; 0x803c25 <counter+0x1>
 780:	40 91 26 3c 	lds	r20, 0x3C26	; 0x803c26 <counter+0x2>
 784:	50 91 27 3c 	lds	r21, 0x3C27	; 0x803c27 <counter+0x3>
 788:	aa e7       	ldi	r26, 0x7A	; 122
 78a:	b0 e0       	ldi	r27, 0x00	; 0
 78c:	ca d3       	rcall	.+1940   	; 0xf22 <__muluhisi3>
 78e:	69 35       	cpi	r22, 0x59	; 89
 790:	72 40       	sbci	r23, 0x02	; 2
 792:	81 05       	cpc	r24, r1
 794:	91 05       	cpc	r25, r1
 796:	64 f3       	brlt	.-40     	; 0x770 <IR_Read+0xe8>
					//end of message
				}
				
				GenerateRepeatCode();
 798:	d0 dd       	rcall	.-1120   	; 0x33a <GenerateRepeatCode>
				
				counter=0;
 79a:	10 92 24 3c 	sts	0x3C24, r1	; 0x803c24 <counter>
 79e:	10 92 25 3c 	sts	0x3C25, r1	; 0x803c25 <counter+0x1>
 7a2:	10 92 26 3c 	sts	0x3C26, r1	; 0x803c26 <counter+0x2>
 7a6:	10 92 27 3c 	sts	0x3C27, r1	; 0x803c27 <counter+0x3>
				idle_flag=0;
 7aa:	10 92 22 3c 	sts	0x3C22, r1	; 0x803c22 <idle_flag>
 7ae:	10 92 23 3c 	sts	0x3C23, r1	; 0x803c23 <idle_flag+0x1>
				cli();
 7b2:	f8 94       	cli
				RTC.CNT = 0;
 7b4:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7fc148>
 7b8:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7fc149>
				sei();
 7bc:	78 94       	sei
				
				enableIR_ISR();
 7be:	ef dd       	rcall	.-1058   	; 0x39e <enableIR_ISR>
				break;
 7c0:	08 95       	ret
			}
			
			//hold_counter = 0; // Reset hold counter if not received repeat signal.
			cli();
 7c2:	f8 94       	cli
			RTC.CNT = 0;
 7c4:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7fc148>
 7c8:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7fc149>
			sei();
 7cc:	78 94       	sei
			counter = 0;
 7ce:	10 92 24 3c 	sts	0x3C24, r1	; 0x803c24 <counter>
 7d2:	10 92 25 3c 	sts	0x3C25, r1	; 0x803c25 <counter+0x1>
 7d6:	10 92 26 3c 	sts	0x3C26, r1	; 0x803c26 <counter+0x2>
 7da:	10 92 27 3c 	sts	0x3C27, r1	; 0x803c27 <counter+0x3>
			idle_flag=0;
 7de:	10 92 22 3c 	sts	0x3C22, r1	; 0x803c22 <idle_flag>
 7e2:	10 92 23 3c 	sts	0x3C23, r1	; 0x803c23 <idle_flag+0x1>
			command_counter_flag=1;
 7e6:	81 e0       	ldi	r24, 0x01	; 1
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	80 93 20 3c 	sts	0x3C20, r24	; 0x803c20 <command_counter_flag>
 7ee:	90 93 21 3c 	sts	0x3C21, r25	; 0x803c21 <command_counter_flag+0x1>
			for(i=0;i<33;i++){
 7f2:	10 92 37 3c 	sts	0x3C37, r1	; 0x803c37 <i>
 7f6:	10 92 38 3c 	sts	0x3C38, r1	; 0x803c38 <i+0x1>
 7fa:	ca c0       	rjmp	.+404    	; 0x990 <IR_Read+0x308>
				tick_counter=0;
 7fc:	10 92 1c 3c 	sts	0x3C1C, r1	; 0x803c1c <tick_counter>
 800:	10 92 1d 3c 	sts	0x3C1D, r1	; 0x803c1d <tick_counter+0x1>
 804:	10 92 1e 3c 	sts	0x3C1E, r1	; 0x803c1e <tick_counter+0x2>
 808:	10 92 1f 3c 	sts	0x3C1F, r1	; 0x803c1f <tick_counter+0x3>
				while(((PORTA.IN & (1<<IR_INPUT)) == 0)&&tick_counter*RTC_TICK<=650){
 80c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__RODATA_PM_OFFSET__+0x7fc408>
 810:	83 fd       	sbrc	r24, 3
 812:	10 c0       	rjmp	.+32     	; 0x834 <IR_Read+0x1ac>
 814:	20 91 1c 3c 	lds	r18, 0x3C1C	; 0x803c1c <tick_counter>
 818:	30 91 1d 3c 	lds	r19, 0x3C1D	; 0x803c1d <tick_counter+0x1>
 81c:	40 91 1e 3c 	lds	r20, 0x3C1E	; 0x803c1e <tick_counter+0x2>
 820:	50 91 1f 3c 	lds	r21, 0x3C1F	; 0x803c1f <tick_counter+0x3>
 824:	aa e7       	ldi	r26, 0x7A	; 122
 826:	b0 e0       	ldi	r27, 0x00	; 0
 828:	7c d3       	rcall	.+1784   	; 0xf22 <__muluhisi3>
 82a:	6b 38       	cpi	r22, 0x8B	; 139
 82c:	72 40       	sbci	r23, 0x02	; 2
 82e:	81 05       	cpc	r24, r1
 830:	91 05       	cpc	r25, r1
 832:	64 f3       	brlt	.-40     	; 0x80c <IR_Read+0x184>
					//loop until next space
				}
				
				tick_counter=0;
 834:	10 92 1c 3c 	sts	0x3C1C, r1	; 0x803c1c <tick_counter>
 838:	10 92 1d 3c 	sts	0x3C1D, r1	; 0x803c1d <tick_counter+0x1>
 83c:	10 92 1e 3c 	sts	0x3C1E, r1	; 0x803c1e <tick_counter+0x2>
 840:	10 92 1f 3c 	sts	0x3C1F, r1	; 0x803c1f <tick_counter+0x3>
				disableRTC();//reset timer
 844:	b6 dd       	rcall	.-1172   	; 0x3b2 <disableRTC>
				enableRTC();
 846:	c5 dd       	rcall	.-1142   	; 0x3d2 <enableRTC>
				while(!((PORTA.IN & (1<<IR_INPUT)) == 0)&&tick_counter*RTC_TICK<=1800){
 848:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__RODATA_PM_OFFSET__+0x7fc408>
 84c:	83 ff       	sbrs	r24, 3
 84e:	10 c0       	rjmp	.+32     	; 0x870 <IR_Read+0x1e8>
 850:	20 91 1c 3c 	lds	r18, 0x3C1C	; 0x803c1c <tick_counter>
 854:	30 91 1d 3c 	lds	r19, 0x3C1D	; 0x803c1d <tick_counter+0x1>
 858:	40 91 1e 3c 	lds	r20, 0x3C1E	; 0x803c1e <tick_counter+0x2>
 85c:	50 91 1f 3c 	lds	r21, 0x3C1F	; 0x803c1f <tick_counter+0x3>
 860:	aa e7       	ldi	r26, 0x7A	; 122
 862:	b0 e0       	ldi	r27, 0x00	; 0
 864:	5e d3       	rcall	.+1724   	; 0xf22 <__muluhisi3>
 866:	69 30       	cpi	r22, 0x09	; 9
 868:	77 40       	sbci	r23, 0x07	; 7
 86a:	81 05       	cpc	r24, r1
 86c:	91 05       	cpc	r25, r1
 86e:	64 f3       	brlt	.-40     	; 0x848 <IR_Read+0x1c0>
					//loop until next pulse
				}
				if(i==32 && tick_counter*RTC_TICK> 1000){//end of message
 870:	80 91 37 3c 	lds	r24, 0x3C37	; 0x803c37 <i>
 874:	90 91 38 3c 	lds	r25, 0x3C38	; 0x803c38 <i+0x1>
 878:	80 97       	sbiw	r24, 0x20	; 32
 87a:	89 f4       	brne	.+34     	; 0x89e <IR_Read+0x216>
 87c:	20 91 1c 3c 	lds	r18, 0x3C1C	; 0x803c1c <tick_counter>
 880:	30 91 1d 3c 	lds	r19, 0x3C1D	; 0x803c1d <tick_counter+0x1>
 884:	40 91 1e 3c 	lds	r20, 0x3C1E	; 0x803c1e <tick_counter+0x2>
 888:	50 91 1f 3c 	lds	r21, 0x3C1F	; 0x803c1f <tick_counter+0x3>
 88c:	aa e7       	ldi	r26, 0x7A	; 122
 88e:	b0 e0       	ldi	r27, 0x00	; 0
 890:	48 d3       	rcall	.+1680   	; 0xf22 <__muluhisi3>
 892:	69 3e       	cpi	r22, 0xE9	; 233
 894:	73 40       	sbci	r23, 0x03	; 3
 896:	81 05       	cpc	r24, r1
 898:	91 05       	cpc	r25, r1
 89a:	0c f0       	brlt	.+2      	; 0x89e <IR_Read+0x216>
 89c:	80 c0       	rjmp	.+256    	; 0x99e <IR_Read+0x316>
					break;
				}
				if( tick_counter*RTC_TICK> 1000)   {                            
 89e:	20 91 1c 3c 	lds	r18, 0x3C1C	; 0x803c1c <tick_counter>
 8a2:	30 91 1d 3c 	lds	r19, 0x3C1D	; 0x803c1d <tick_counter+0x1>
 8a6:	40 91 1e 3c 	lds	r20, 0x3C1E	; 0x803c1e <tick_counter+0x2>
 8aa:	50 91 1f 3c 	lds	r21, 0x3C1F	; 0x803c1f <tick_counter+0x3>
 8ae:	aa e7       	ldi	r26, 0x7A	; 122
 8b0:	b0 e0       	ldi	r27, 0x00	; 0
 8b2:	37 d3       	rcall	.+1646   	; 0xf22 <__muluhisi3>
 8b4:	69 3e       	cpi	r22, 0xE9	; 233
 8b6:	73 40       	sbci	r23, 0x03	; 3
 8b8:	81 05       	cpc	r24, r1
 8ba:	91 05       	cpc	r25, r1
 8bc:	b4 f1       	brlt	.+108    	; 0x92a <IR_Read+0x2a2>
					command_register = command_register<<1;   
 8be:	80 91 16 3c 	lds	r24, 0x3C16	; 0x803c16 <command_register>
 8c2:	90 91 17 3c 	lds	r25, 0x3C17	; 0x803c17 <command_register+0x1>
 8c6:	a0 91 18 3c 	lds	r26, 0x3C18	; 0x803c18 <command_register+0x2>
 8ca:	b0 91 19 3c 	lds	r27, 0x3C19	; 0x803c19 <command_register+0x3>
 8ce:	88 0f       	add	r24, r24
 8d0:	99 1f       	adc	r25, r25
 8d2:	aa 1f       	adc	r26, r26
 8d4:	bb 1f       	adc	r27, r27
 8d6:	80 93 16 3c 	sts	0x3C16, r24	; 0x803c16 <command_register>
 8da:	90 93 17 3c 	sts	0x3C17, r25	; 0x803c17 <command_register+0x1>
 8de:	a0 93 18 3c 	sts	0x3C18, r26	; 0x803c18 <command_register+0x2>
 8e2:	b0 93 19 3c 	sts	0x3C19, r27	; 0x803c19 <command_register+0x3>
					command_register |= 0x01;
 8e6:	80 91 16 3c 	lds	r24, 0x3C16	; 0x803c16 <command_register>
 8ea:	90 91 17 3c 	lds	r25, 0x3C17	; 0x803c17 <command_register+0x1>
 8ee:	a0 91 18 3c 	lds	r26, 0x3C18	; 0x803c18 <command_register+0x2>
 8f2:	b0 91 19 3c 	lds	r27, 0x3C19	; 0x803c19 <command_register+0x3>
 8f6:	81 60       	ori	r24, 0x01	; 1
 8f8:	80 93 16 3c 	sts	0x3C16, r24	; 0x803c16 <command_register>
 8fc:	90 93 17 3c 	sts	0x3C17, r25	; 0x803c17 <command_register+0x1>
 900:	a0 93 18 3c 	sts	0x3C18, r26	; 0x803c18 <command_register+0x2>
 904:	b0 93 19 3c 	sts	0x3C19, r27	; 0x803c19 <command_register+0x3>
					tick_counter=tick_counter;
 908:	80 91 1c 3c 	lds	r24, 0x3C1C	; 0x803c1c <tick_counter>
 90c:	90 91 1d 3c 	lds	r25, 0x3C1D	; 0x803c1d <tick_counter+0x1>
 910:	a0 91 1e 3c 	lds	r26, 0x3C1E	; 0x803c1e <tick_counter+0x2>
 914:	b0 91 1f 3c 	lds	r27, 0x3C1F	; 0x803c1f <tick_counter+0x3>
 918:	80 93 1c 3c 	sts	0x3C1C, r24	; 0x803c1c <tick_counter>
 91c:	90 93 1d 3c 	sts	0x3C1D, r25	; 0x803c1d <tick_counter+0x1>
 920:	a0 93 1e 3c 	sts	0x3C1E, r26	; 0x803c1e <tick_counter+0x2>
 924:	b0 93 1f 3c 	sts	0x3C1F, r27	; 0x803c1f <tick_counter+0x3>
 928:	24 c0       	rjmp	.+72     	; 0x972 <IR_Read+0x2ea>
				    }                
				else    {                                         
					command_register = command_register<<1;
 92a:	80 91 16 3c 	lds	r24, 0x3C16	; 0x803c16 <command_register>
 92e:	90 91 17 3c 	lds	r25, 0x3C17	; 0x803c17 <command_register+0x1>
 932:	a0 91 18 3c 	lds	r26, 0x3C18	; 0x803c18 <command_register+0x2>
 936:	b0 91 19 3c 	lds	r27, 0x3C19	; 0x803c19 <command_register+0x3>
 93a:	88 0f       	add	r24, r24
 93c:	99 1f       	adc	r25, r25
 93e:	aa 1f       	adc	r26, r26
 940:	bb 1f       	adc	r27, r27
 942:	80 93 16 3c 	sts	0x3C16, r24	; 0x803c16 <command_register>
 946:	90 93 17 3c 	sts	0x3C17, r25	; 0x803c17 <command_register+0x1>
 94a:	a0 93 18 3c 	sts	0x3C18, r26	; 0x803c18 <command_register+0x2>
 94e:	b0 93 19 3c 	sts	0x3C19, r27	; 0x803c19 <command_register+0x3>
					tick_counter=tick_counter;
 952:	80 91 1c 3c 	lds	r24, 0x3C1C	; 0x803c1c <tick_counter>
 956:	90 91 1d 3c 	lds	r25, 0x3C1D	; 0x803c1d <tick_counter+0x1>
 95a:	a0 91 1e 3c 	lds	r26, 0x3C1E	; 0x803c1e <tick_counter+0x2>
 95e:	b0 91 1f 3c 	lds	r27, 0x3C1F	; 0x803c1f <tick_counter+0x3>
 962:	80 93 1c 3c 	sts	0x3C1C, r24	; 0x803c1c <tick_counter>
 966:	90 93 1d 3c 	sts	0x3C1D, r25	; 0x803c1d <tick_counter+0x1>
 96a:	a0 93 1e 3c 	sts	0x3C1E, r26	; 0x803c1e <tick_counter+0x2>
 96e:	b0 93 1f 3c 	sts	0x3C1F, r27	; 0x803c1f <tick_counter+0x3>
				}
				
				
				cli();
 972:	f8 94       	cli
				RTC.CNT = 0;
 974:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7fc148>
 978:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7fc149>
				sei();
 97c:	78 94       	sei
			RTC.CNT = 0;
			sei();
			counter = 0;
			idle_flag=0;
			command_counter_flag=1;
			for(i=0;i<33;i++){
 97e:	80 91 37 3c 	lds	r24, 0x3C37	; 0x803c37 <i>
 982:	90 91 38 3c 	lds	r25, 0x3C38	; 0x803c38 <i+0x1>
 986:	01 96       	adiw	r24, 0x01	; 1
 988:	80 93 37 3c 	sts	0x3C37, r24	; 0x803c37 <i>
 98c:	90 93 38 3c 	sts	0x3C38, r25	; 0x803c38 <i+0x1>
 990:	80 91 37 3c 	lds	r24, 0x3C37	; 0x803c37 <i>
 994:	90 91 38 3c 	lds	r25, 0x3C38	; 0x803c38 <i+0x1>
 998:	81 97       	sbiw	r24, 0x21	; 33
 99a:	0c f4       	brge	.+2      	; 0x99e <IR_Read+0x316>
 99c:	2f cf       	rjmp	.-418    	; 0x7fc <IR_Read+0x174>
			}
			//wait for end bit. It is a inverse pulse for 500 us
			//If any signal comes in 40ms it is repeat
			//If not go to idle case.
			
			if(VerifyAddress()){
 99e:	bb dc       	rcall	.-1674   	; 0x316 <VerifyAddress>
 9a0:	81 11       	cpse	r24, r1
				DecodeCommand();
 9a2:	1f de       	rcall	.-962    	; 0x5e2 <DecodeCommand>
				
				tick_counter=0;
			}
			else{ 
			}*/
			idle_flag=1;
 9a4:	81 e0       	ldi	r24, 0x01	; 1
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	80 93 22 3c 	sts	0x3C22, r24	; 0x803c22 <idle_flag>
 9ac:	90 93 23 3c 	sts	0x3C23, r25	; 0x803c23 <idle_flag+0x1>
			counter = 0;
 9b0:	10 92 24 3c 	sts	0x3C24, r1	; 0x803c24 <counter>
 9b4:	10 92 25 3c 	sts	0x3C25, r1	; 0x803c25 <counter+0x1>
 9b8:	10 92 26 3c 	sts	0x3C26, r1	; 0x803c26 <counter+0x2>
 9bc:	10 92 27 3c 	sts	0x3C27, r1	; 0x803c27 <counter+0x3>
			cli();
 9c0:	f8 94       	cli
			RTC.CNT = 0;
 9c2:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7fc148>
 9c6:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7fc149>
			sei();
 9ca:	78 94       	sei
			//If we did not received messages for more than 100 ms, it means no repeat. Change flag
			while(!((PORTA.IN & (1<<IR_INPUT)) == 0)&& counter*RTC_TICK <= 50000){
 9cc:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__RODATA_PM_OFFSET__+0x7fc408>
 9d0:	83 ff       	sbrs	r24, 3
 9d2:	10 c0       	rjmp	.+32     	; 0x9f4 <IR_Read+0x36c>
 9d4:	20 91 24 3c 	lds	r18, 0x3C24	; 0x803c24 <counter>
 9d8:	30 91 25 3c 	lds	r19, 0x3C25	; 0x803c25 <counter+0x1>
 9dc:	40 91 26 3c 	lds	r20, 0x3C26	; 0x803c26 <counter+0x2>
 9e0:	50 91 27 3c 	lds	r21, 0x3C27	; 0x803c27 <counter+0x3>
 9e4:	aa e7       	ldi	r26, 0x7A	; 122
 9e6:	b0 e0       	ldi	r27, 0x00	; 0
 9e8:	9c d2       	rcall	.+1336   	; 0xf22 <__muluhisi3>
 9ea:	61 35       	cpi	r22, 0x51	; 81
 9ec:	73 4c       	sbci	r23, 0xC3	; 195
 9ee:	81 05       	cpc	r24, r1
 9f0:	91 05       	cpc	r25, r1
 9f2:	64 f3       	brlt	.-40     	; 0x9cc <IR_Read+0x344>
				
			}
			if(counter*RTC_TICK >= 40000){
 9f4:	20 91 24 3c 	lds	r18, 0x3C24	; 0x803c24 <counter>
 9f8:	30 91 25 3c 	lds	r19, 0x3C25	; 0x803c25 <counter+0x1>
 9fc:	40 91 26 3c 	lds	r20, 0x3C26	; 0x803c26 <counter+0x2>
 a00:	50 91 27 3c 	lds	r21, 0x3C27	; 0x803c27 <counter+0x3>
 a04:	aa e7       	ldi	r26, 0x7A	; 122
 a06:	b0 e0       	ldi	r27, 0x00	; 0
 a08:	8c d2       	rcall	.+1304   	; 0xf22 <__muluhisi3>
 a0a:	60 34       	cpi	r22, 0x40	; 64
 a0c:	7c 49       	sbci	r23, 0x9C	; 156
 a0e:	81 05       	cpc	r24, r1
 a10:	91 05       	cpc	r25, r1
 a12:	24 f1       	brlt	.+72     	; 0xa5c <IR_Read+0x3d4>
				
				
				hold_flag=0;
 a14:	10 92 10 3c 	sts	0x3C10, r1	; 0x803c10 <hold_flag>
 a18:	10 92 11 3c 	sts	0x3C11, r1	; 0x803c11 <hold_flag+0x1>
				hold_counter = 0;
 a1c:	10 92 12 3c 	sts	0x3C12, r1	; 0x803c12 <hold_counter>
 a20:	10 92 13 3c 	sts	0x3C13, r1	; 0x803c13 <hold_counter+0x1>
 a24:	10 92 14 3c 	sts	0x3C14, r1	; 0x803c14 <hold_counter+0x2>
 a28:	10 92 15 3c 	sts	0x3C15, r1	; 0x803c15 <hold_counter+0x3>
				if(InputState.currentState==POWER_HOLD){
 a2c:	80 91 35 3c 	lds	r24, 0x3C35	; 0x803c35 <InputState>
 a30:	81 30       	cpi	r24, 0x01	; 1
 a32:	19 f4       	brne	.+6      	; 0xa3a <IR_Read+0x3b2>
					InputState.currentState=POWER;
 a34:	10 92 35 3c 	sts	0x3C35, r1	; 0x803c35 <InputState>
 a38:	11 c0       	rjmp	.+34     	; 0xa5c <IR_Read+0x3d4>
				}
				else if(InputState.currentState==INCREMENT_HOLD){
 a3a:	83 30       	cpi	r24, 0x03	; 3
 a3c:	21 f4       	brne	.+8      	; 0xa46 <IR_Read+0x3be>
					InputState.currentState=INCREMENT;
 a3e:	82 e0       	ldi	r24, 0x02	; 2
 a40:	80 93 35 3c 	sts	0x3C35, r24	; 0x803c35 <InputState>
 a44:	0b c0       	rjmp	.+22     	; 0xa5c <IR_Read+0x3d4>
				}
				else if(InputState.currentState==DECREMENT_HOLD){
 a46:	85 30       	cpi	r24, 0x05	; 5
 a48:	21 f4       	brne	.+8      	; 0xa52 <IR_Read+0x3ca>
					InputState.currentState=DECREMENT;
 a4a:	84 e0       	ldi	r24, 0x04	; 4
 a4c:	80 93 35 3c 	sts	0x3C35, r24	; 0x803c35 <InputState>
 a50:	05 c0       	rjmp	.+10     	; 0xa5c <IR_Read+0x3d4>
				}
				else if(InputState.currentState==LIGHT_HOLD){
 a52:	87 30       	cpi	r24, 0x07	; 7
 a54:	19 f4       	brne	.+6      	; 0xa5c <IR_Read+0x3d4>
					InputState.currentState=LIGHT;
 a56:	86 e0       	ldi	r24, 0x06	; 6
 a58:	80 93 35 3c 	sts	0x3C35, r24	; 0x803c35 <InputState>
				}
			}
			idle_flag=0;
 a5c:	10 92 22 3c 	sts	0x3C22, r1	; 0x803c22 <idle_flag>
 a60:	10 92 23 3c 	sts	0x3C23, r1	; 0x803c23 <idle_flag+0x1>
			tick_counter=0;
 a64:	10 92 1c 3c 	sts	0x3C1C, r1	; 0x803c1c <tick_counter>
 a68:	10 92 1d 3c 	sts	0x3C1D, r1	; 0x803c1d <tick_counter+0x1>
 a6c:	10 92 1e 3c 	sts	0x3C1E, r1	; 0x803c1e <tick_counter+0x2>
 a70:	10 92 1f 3c 	sts	0x3C1F, r1	; 0x803c1f <tick_counter+0x3>
			cli();
 a74:	f8 94       	cli
			RTC.CNT = 0;
 a76:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7fc148>
 a7a:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7fc149>
			sei();
 a7e:	78 94       	sei
			
			enableIR_ISR();
 a80:	8e dc       	rcall	.-1764   	; 0x39e <enableIR_ISR>
			//disable timer in the end
			break;
 a82:	08 95       	ret
		
		case(END):
			counter=0;
 a84:	10 92 24 3c 	sts	0x3C24, r1	; 0x803c24 <counter>
 a88:	10 92 25 3c 	sts	0x3C25, r1	; 0x803c25 <counter+0x1>
 a8c:	10 92 26 3c 	sts	0x3C26, r1	; 0x803c26 <counter+0x2>
 a90:	10 92 27 3c 	sts	0x3C27, r1	; 0x803c27 <counter+0x3>
 a94:	08 95       	ret

00000a96 <main>:
int volatile usart_count = 0 ;
int volatile usart_flag = 0;
volatile uint8_t data = 'A';
int main(void)
{
	CCP = 0xD8;
 a96:	88 ed       	ldi	r24, 0xD8	; 216
 a98:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.MCLKLOCK =0x00;
 a9a:	e0 e6       	ldi	r30, 0x60	; 96
 a9c:	f0 e0       	ldi	r31, 0x00	; 0
 a9e:	12 82       	std	Z+2, r1	; 0x02
	CCP = 0xD8;
 aa0:	84 bf       	out	0x34, r24	; 52
    CLKCTRL.MCLKCTRLB = 0;
 aa2:	11 82       	std	Z+1, r1	; 0x01
	CCP = 0xD8;
 aa4:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.MCLKLOCK =0x01;
 aa6:	81 e0       	ldi	r24, 0x01	; 1
 aa8:	82 83       	std	Z+2, r24	; 0x02
	PORTD.DIR = (1<<LED_ON_OFF);
 aaa:	e0 e6       	ldi	r30, 0x60	; 96
 aac:	f4 e0       	ldi	r31, 0x04	; 4
 aae:	82 e0       	ldi	r24, 0x02	; 2
 ab0:	80 83       	st	Z, r24
	PORTD.OUT = 0x00; // Close All LEDs
 ab2:	14 82       	std	Z+4, r1	; 0x04
	CPUINT.LVL1VEC = RTC_CNT_vect_num;
 ab4:	83 e0       	ldi	r24, 0x03	; 3
 ab6:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <__RODATA_PM_OFFSET__+0x7fc113>
	Initialize();
 aba:	f6 db       	rcall	.-2068   	; 0x2a8 <Initialize>
 abc:	ff cf       	rjmp	.-2      	; 0xabc <main+0x26>

00000abe <__vector_6>:

/************************************************************************/
/* Timer interrupt increases a counter every 1ms.                                                                     */
/************************************************************************/

ISR(PORTA_PORT_vect){
 abe:	1f 92       	push	r1
 ac0:	0f 92       	push	r0
 ac2:	0f b6       	in	r0, 0x3f	; 63
 ac4:	0f 92       	push	r0
 ac6:	11 24       	eor	r1, r1
 ac8:	2f 93       	push	r18
 aca:	3f 93       	push	r19
 acc:	4f 93       	push	r20
 ace:	5f 93       	push	r21
 ad0:	6f 93       	push	r22
 ad2:	7f 93       	push	r23
 ad4:	8f 93       	push	r24
 ad6:	9f 93       	push	r25
 ad8:	af 93       	push	r26
 ada:	bf 93       	push	r27
 adc:	ef 93       	push	r30
 ade:	ff 93       	push	r31
	NECState.currentState = COMMAND;
 ae0:	82 e0       	ldi	r24, 0x02	; 2
 ae2:	80 93 3a 3c 	sts	0x3C3A, r24	; 0x803c3a <NECState>
	IR_Read(); 
 ae6:	d0 dd       	rcall	.-1120   	; 0x688 <IR_Read>
}
 ae8:	ff 91       	pop	r31
 aea:	ef 91       	pop	r30
 aec:	bf 91       	pop	r27
 aee:	af 91       	pop	r26
 af0:	9f 91       	pop	r25
 af2:	8f 91       	pop	r24
 af4:	7f 91       	pop	r23
 af6:	6f 91       	pop	r22
 af8:	5f 91       	pop	r21
 afa:	4f 91       	pop	r20
 afc:	3f 91       	pop	r19
 afe:	2f 91       	pop	r18
 b00:	0f 90       	pop	r0
 b02:	0f be       	out	0x3f, r0	; 63
 b04:	0f 90       	pop	r0
 b06:	1f 90       	pop	r1
 b08:	18 95       	reti

00000b0a <__vector_3>:
ISR(RTC_CNT_vect){
 b0a:	1f 92       	push	r1
 b0c:	0f 92       	push	r0
 b0e:	0f b6       	in	r0, 0x3f	; 63
 b10:	0f 92       	push	r0
 b12:	11 24       	eor	r1, r1
 b14:	2f 93       	push	r18
 b16:	3f 93       	push	r19
 b18:	4f 93       	push	r20
 b1a:	5f 93       	push	r21
 b1c:	6f 93       	push	r22
 b1e:	7f 93       	push	r23
 b20:	8f 93       	push	r24
 b22:	9f 93       	push	r25
 b24:	af 93       	push	r26
 b26:	bf 93       	push	r27
 b28:	ef 93       	push	r30
 b2a:	ff 93       	push	r31
	 RTC.INTFLAGS = RTC_OVF_bm;
 b2c:	81 e0       	ldi	r24, 0x01	; 1
 b2e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__RODATA_PM_OFFSET__+0x7fc143>
	 
	if(idle_flag == 1){
 b32:	80 91 22 3c 	lds	r24, 0x3C22	; 0x803c22 <idle_flag>
 b36:	90 91 23 3c 	lds	r25, 0x3C23	; 0x803c23 <idle_flag+0x1>
 b3a:	01 97       	sbiw	r24, 0x01	; 1
 b3c:	99 f4       	brne	.+38     	; 0xb64 <__vector_3+0x5a>
		counter++;
 b3e:	80 91 24 3c 	lds	r24, 0x3C24	; 0x803c24 <counter>
 b42:	90 91 25 3c 	lds	r25, 0x3C25	; 0x803c25 <counter+0x1>
 b46:	a0 91 26 3c 	lds	r26, 0x3C26	; 0x803c26 <counter+0x2>
 b4a:	b0 91 27 3c 	lds	r27, 0x3C27	; 0x803c27 <counter+0x3>
 b4e:	01 96       	adiw	r24, 0x01	; 1
 b50:	a1 1d       	adc	r26, r1
 b52:	b1 1d       	adc	r27, r1
 b54:	80 93 24 3c 	sts	0x3C24, r24	; 0x803c24 <counter>
 b58:	90 93 25 3c 	sts	0x3C25, r25	; 0x803c25 <counter+0x1>
 b5c:	a0 93 26 3c 	sts	0x3C26, r26	; 0x803c26 <counter+0x2>
 b60:	b0 93 27 3c 	sts	0x3C27, r27	; 0x803c27 <counter+0x3>
		}
	if(command_counter_flag==1){
 b64:	80 91 20 3c 	lds	r24, 0x3C20	; 0x803c20 <command_counter_flag>
 b68:	90 91 21 3c 	lds	r25, 0x3C21	; 0x803c21 <command_counter_flag+0x1>
 b6c:	01 97       	sbiw	r24, 0x01	; 1
 b6e:	e1 f4       	brne	.+56     	; 0xba8 <__vector_3+0x9e>
		tick_counter++;
 b70:	80 91 1c 3c 	lds	r24, 0x3C1C	; 0x803c1c <tick_counter>
 b74:	90 91 1d 3c 	lds	r25, 0x3C1D	; 0x803c1d <tick_counter+0x1>
 b78:	a0 91 1e 3c 	lds	r26, 0x3C1E	; 0x803c1e <tick_counter+0x2>
 b7c:	b0 91 1f 3c 	lds	r27, 0x3C1F	; 0x803c1f <tick_counter+0x3>
 b80:	01 96       	adiw	r24, 0x01	; 1
 b82:	a1 1d       	adc	r26, r1
 b84:	b1 1d       	adc	r27, r1
 b86:	80 93 1c 3c 	sts	0x3C1C, r24	; 0x803c1c <tick_counter>
 b8a:	90 93 1d 3c 	sts	0x3C1D, r25	; 0x803c1d <tick_counter+0x1>
 b8e:	a0 93 1e 3c 	sts	0x3C1E, r26	; 0x803c1e <tick_counter+0x2>
 b92:	b0 93 1f 3c 	sts	0x3C1F, r27	; 0x803c1f <tick_counter+0x3>
		total_tick_counter++;	
 b96:	80 91 1a 3c 	lds	r24, 0x3C1A	; 0x803c1a <total_tick_counter>
 b9a:	90 91 1b 3c 	lds	r25, 0x3C1B	; 0x803c1b <total_tick_counter+0x1>
 b9e:	01 96       	adiw	r24, 0x01	; 1
 ba0:	80 93 1a 3c 	sts	0x3C1A, r24	; 0x803c1a <total_tick_counter>
 ba4:	90 93 1b 3c 	sts	0x3C1B, r25	; 0x803c1b <total_tick_counter+0x1>
		}
	if(State.currentState==BOOST){
 ba8:	80 91 39 3c 	lds	r24, 0x3C39	; 0x803c39 <State>
 bac:	84 30       	cpi	r24, 0x04	; 4
 bae:	09 f0       	breq	.+2      	; 0xbb2 <__vector_3+0xa8>
 bb0:	58 c0       	rjmp	.+176    	; 0xc62 <__vector_3+0x158>
		boost_timer++;
 bb2:	80 91 0c 3c 	lds	r24, 0x3C0C	; 0x803c0c <boost_timer>
 bb6:	90 91 0d 3c 	lds	r25, 0x3C0D	; 0x803c0d <boost_timer+0x1>
 bba:	a0 91 0e 3c 	lds	r26, 0x3C0E	; 0x803c0e <boost_timer+0x2>
 bbe:	b0 91 0f 3c 	lds	r27, 0x3C0F	; 0x803c0f <boost_timer+0x3>
 bc2:	01 96       	adiw	r24, 0x01	; 1
 bc4:	a1 1d       	adc	r26, r1
 bc6:	b1 1d       	adc	r27, r1
 bc8:	80 93 0c 3c 	sts	0x3C0C, r24	; 0x803c0c <boost_timer>
 bcc:	90 93 0d 3c 	sts	0x3C0D, r25	; 0x803c0d <boost_timer+0x1>
 bd0:	a0 93 0e 3c 	sts	0x3C0E, r26	; 0x803c0e <boost_timer+0x2>
 bd4:	b0 93 0f 3c 	sts	0x3C0F, r27	; 0x803c0f <boost_timer+0x3>
		boost_total_timer++;
 bd8:	80 91 08 3c 	lds	r24, 0x3C08	; 0x803c08 <boost_total_timer>
 bdc:	90 91 09 3c 	lds	r25, 0x3C09	; 0x803c09 <boost_total_timer+0x1>
 be0:	a0 91 0a 3c 	lds	r26, 0x3C0A	; 0x803c0a <boost_total_timer+0x2>
 be4:	b0 91 0b 3c 	lds	r27, 0x3C0B	; 0x803c0b <boost_total_timer+0x3>
 be8:	01 96       	adiw	r24, 0x01	; 1
 bea:	a1 1d       	adc	r26, r1
 bec:	b1 1d       	adc	r27, r1
 bee:	80 93 08 3c 	sts	0x3C08, r24	; 0x803c08 <boost_total_timer>
 bf2:	90 93 09 3c 	sts	0x3C09, r25	; 0x803c09 <boost_total_timer+0x1>
 bf6:	a0 93 0a 3c 	sts	0x3C0A, r26	; 0x803c0a <boost_total_timer+0x2>
 bfa:	b0 93 0b 3c 	sts	0x3C0B, r27	; 0x803c0b <boost_total_timer+0x3>
		if(boost_timer*RTC_TICK >= ONE_SEC){ // 1sec
 bfe:	20 91 0c 3c 	lds	r18, 0x3C0C	; 0x803c0c <boost_timer>
 c02:	30 91 0d 3c 	lds	r19, 0x3C0D	; 0x803c0d <boost_timer+0x1>
 c06:	40 91 0e 3c 	lds	r20, 0x3C0E	; 0x803c0e <boost_timer+0x2>
 c0a:	50 91 0f 3c 	lds	r21, 0x3C0F	; 0x803c0f <boost_timer+0x3>
 c0e:	aa e7       	ldi	r26, 0x7A	; 122
 c10:	b0 e0       	ldi	r27, 0x00	; 0
 c12:	87 d1       	rcall	.+782    	; 0xf22 <__muluhisi3>
 c14:	60 34       	cpi	r22, 0x40	; 64
 c16:	72 44       	sbci	r23, 0x42	; 66
 c18:	8f 40       	sbci	r24, 0x0F	; 15
 c1a:	91 05       	cpc	r25, r1
 c1c:	70 f0       	brcs	.+28     	; 0xc3a <__vector_3+0x130>
			PORTA.OUT ^= (1<<LED_4);
 c1e:	e0 e0       	ldi	r30, 0x00	; 0
 c20:	f4 e0       	ldi	r31, 0x04	; 4
 c22:	94 81       	ldd	r25, Z+4	; 0x04
 c24:	80 e2       	ldi	r24, 0x20	; 32
 c26:	89 27       	eor	r24, r25
 c28:	84 83       	std	Z+4, r24	; 0x04
			boost_timer=0;
 c2a:	10 92 0c 3c 	sts	0x3C0C, r1	; 0x803c0c <boost_timer>
 c2e:	10 92 0d 3c 	sts	0x3C0D, r1	; 0x803c0d <boost_timer+0x1>
 c32:	10 92 0e 3c 	sts	0x3C0E, r1	; 0x803c0e <boost_timer+0x2>
 c36:	10 92 0f 3c 	sts	0x3C0F, r1	; 0x803c0f <boost_timer+0x3>
		}
		if(boost_total_timer*RTC_TICK>=BOOST_MAX_30SEC){
 c3a:	20 91 08 3c 	lds	r18, 0x3C08	; 0x803c08 <boost_total_timer>
 c3e:	30 91 09 3c 	lds	r19, 0x3C09	; 0x803c09 <boost_total_timer+0x1>
 c42:	40 91 0a 3c 	lds	r20, 0x3C0A	; 0x803c0a <boost_total_timer+0x2>
 c46:	50 91 0b 3c 	lds	r21, 0x3C0B	; 0x803c0b <boost_total_timer+0x3>
 c4a:	aa e7       	ldi	r26, 0x7A	; 122
 c4c:	b0 e0       	ldi	r27, 0x00	; 0
 c4e:	69 d1       	rcall	.+722    	; 0xf22 <__muluhisi3>
 c50:	60 38       	cpi	r22, 0x80	; 128
 c52:	73 4c       	sbci	r23, 0xC3	; 195
 c54:	89 4c       	sbci	r24, 0xC9	; 201
 c56:	91 40       	sbci	r25, 0x01	; 1
 c58:	20 f0       	brcs	.+8      	; 0xc62 <__vector_3+0x158>
			State.currentState = THREE;
 c5a:	83 e0       	ldi	r24, 0x03	; 3
 c5c:	80 93 39 3c 	sts	0x3C39, r24	; 0x803c39 <State>
			setState();
 c60:	fd db       	rcall	.-2054   	; 0x45c <setState>
		}
	}
	if(hold_flag==1){
 c62:	80 91 10 3c 	lds	r24, 0x3C10	; 0x803c10 <hold_flag>
 c66:	90 91 11 3c 	lds	r25, 0x3C11	; 0x803c11 <hold_flag+0x1>
 c6a:	01 97       	sbiw	r24, 0x01	; 1
 c6c:	09 f0       	breq	.+2      	; 0xc70 <__vector_3+0x166>
 c6e:	8d c0       	rjmp	.+282    	; 0xd8a <__vector_3+0x280>
		hold_counter++;
 c70:	80 91 12 3c 	lds	r24, 0x3C12	; 0x803c12 <hold_counter>
 c74:	90 91 13 3c 	lds	r25, 0x3C13	; 0x803c13 <hold_counter+0x1>
 c78:	a0 91 14 3c 	lds	r26, 0x3C14	; 0x803c14 <hold_counter+0x2>
 c7c:	b0 91 15 3c 	lds	r27, 0x3C15	; 0x803c15 <hold_counter+0x3>
 c80:	01 96       	adiw	r24, 0x01	; 1
 c82:	a1 1d       	adc	r26, r1
 c84:	b1 1d       	adc	r27, r1
 c86:	80 93 12 3c 	sts	0x3C12, r24	; 0x803c12 <hold_counter>
 c8a:	90 93 13 3c 	sts	0x3C13, r25	; 0x803c13 <hold_counter+0x1>
 c8e:	a0 93 14 3c 	sts	0x3C14, r26	; 0x803c14 <hold_counter+0x2>
 c92:	b0 93 15 3c 	sts	0x3C15, r27	; 0x803c15 <hold_counter+0x3>
		if((hold_counter*RTC_TICK>=2*ONE_SEC)&&InputState.currentState== POWER_HOLD){//After 4 sec power button press, indicate with buzzer and wait for 2 sec 
 c96:	20 91 12 3c 	lds	r18, 0x3C12	; 0x803c12 <hold_counter>
 c9a:	30 91 13 3c 	lds	r19, 0x3C13	; 0x803c13 <hold_counter+0x1>
 c9e:	40 91 14 3c 	lds	r20, 0x3C14	; 0x803c14 <hold_counter+0x2>
 ca2:	50 91 15 3c 	lds	r21, 0x3C15	; 0x803c15 <hold_counter+0x3>
 ca6:	aa e7       	ldi	r26, 0x7A	; 122
 ca8:	b0 e0       	ldi	r27, 0x00	; 0
 caa:	3b d1       	rcall	.+630    	; 0xf22 <__muluhisi3>
 cac:	60 38       	cpi	r22, 0x80	; 128
 cae:	74 48       	sbci	r23, 0x84	; 132
 cb0:	8e 41       	sbci	r24, 0x1E	; 30
 cb2:	91 05       	cpc	r25, r1
 cb4:	b0 f0       	brcs	.+44     	; 0xce2 <__vector_3+0x1d8>
 cb6:	80 91 35 3c 	lds	r24, 0x3C35	; 0x803c35 <InputState>
 cba:	81 30       	cpi	r24, 0x01	; 1
 cbc:	91 f4       	brne	.+36     	; 0xce2 <__vector_3+0x1d8>
				dev_mode_flag=1;
 cbe:	81 e0       	ldi	r24, 0x01	; 1
 cc0:	90 e0       	ldi	r25, 0x00	; 0
 cc2:	a0 e0       	ldi	r26, 0x00	; 0
 cc4:	b0 e0       	ldi	r27, 0x00	; 0
 cc6:	80 93 04 3c 	sts	0x3C04, r24	; 0x803c04 <dev_mode_flag>
 cca:	90 93 05 3c 	sts	0x3C05, r25	; 0x803c05 <dev_mode_flag+0x1>
 cce:	a0 93 06 3c 	sts	0x3C06, r26	; 0x803c06 <dev_mode_flag+0x2>
 cd2:	b0 93 07 3c 	sts	0x3C07, r27	; 0x803c07 <dev_mode_flag+0x3>
				BuzzerState.currentState = DEV_INIT_SOUND;
 cd6:	85 e0       	ldi	r24, 0x05	; 5
 cd8:	80 93 3c 3c 	sts	0x3C3C, r24	; 0x803c3c <BuzzerState>
				Buzzer();
 cdc:	f5 d9       	rcall	.-3094   	; 0xc8 <Buzzer>
				InputState.currentState=POWER;
 cde:	10 92 35 3c 	sts	0x3C35, r1	; 0x803c35 <InputState>
				
		}
		if((hold_counter*RTC_TICK>=4*ONE_SEC)&&InputState.currentState== LIGHT_HOLD&&dev_mode_flag==0){
 ce2:	20 91 12 3c 	lds	r18, 0x3C12	; 0x803c12 <hold_counter>
 ce6:	30 91 13 3c 	lds	r19, 0x3C13	; 0x803c13 <hold_counter+0x1>
 cea:	40 91 14 3c 	lds	r20, 0x3C14	; 0x803c14 <hold_counter+0x2>
 cee:	50 91 15 3c 	lds	r21, 0x3C15	; 0x803c15 <hold_counter+0x3>
 cf2:	aa e7       	ldi	r26, 0x7A	; 122
 cf4:	b0 e0       	ldi	r27, 0x00	; 0
 cf6:	15 d1       	rcall	.+554    	; 0xf22 <__muluhisi3>
 cf8:	61 15       	cp	r22, r1
 cfa:	79 40       	sbci	r23, 0x09	; 9
 cfc:	8d 43       	sbci	r24, 0x3D	; 61
 cfe:	91 05       	cpc	r25, r1
 d00:	a0 f0       	brcs	.+40     	; 0xd2a <__vector_3+0x220>
 d02:	80 91 35 3c 	lds	r24, 0x3C35	; 0x803c35 <InputState>
 d06:	87 30       	cpi	r24, 0x07	; 7
 d08:	81 f4       	brne	.+32     	; 0xd2a <__vector_3+0x220>
 d0a:	80 91 04 3c 	lds	r24, 0x3C04	; 0x803c04 <dev_mode_flag>
 d0e:	90 91 05 3c 	lds	r25, 0x3C05	; 0x803c05 <dev_mode_flag+0x1>
 d12:	a0 91 06 3c 	lds	r26, 0x3C06	; 0x803c06 <dev_mode_flag+0x2>
 d16:	b0 91 07 3c 	lds	r27, 0x3C07	; 0x803c07 <dev_mode_flag+0x3>
 d1a:	89 2b       	or	r24, r25
 d1c:	8a 2b       	or	r24, r26
 d1e:	8b 2b       	or	r24, r27
 d20:	21 f4       	brne	.+8      	; 0xd2a <__vector_3+0x220>
			State.currentState = BRIGHT_ADJ;
 d22:	86 e0       	ldi	r24, 0x06	; 6
 d24:	80 93 39 3c 	sts	0x3C39, r24	; 0x803c39 <State>
			setState();
 d28:	99 db       	rcall	.-2254   	; 0x45c <setState>
		}
		if((hold_counter*RTC_TICK>=2*ONE_SEC)&&InputState.currentState== LIGHT_HOLD&&dev_mode_flag==1){
 d2a:	20 91 12 3c 	lds	r18, 0x3C12	; 0x803c12 <hold_counter>
 d2e:	30 91 13 3c 	lds	r19, 0x3C13	; 0x803c13 <hold_counter+0x1>
 d32:	40 91 14 3c 	lds	r20, 0x3C14	; 0x803c14 <hold_counter+0x2>
 d36:	50 91 15 3c 	lds	r21, 0x3C15	; 0x803c15 <hold_counter+0x3>
 d3a:	aa e7       	ldi	r26, 0x7A	; 122
 d3c:	b0 e0       	ldi	r27, 0x00	; 0
 d3e:	f1 d0       	rcall	.+482    	; 0xf22 <__muluhisi3>
 d40:	60 38       	cpi	r22, 0x80	; 128
 d42:	74 48       	sbci	r23, 0x84	; 132
 d44:	8e 41       	sbci	r24, 0x1E	; 30
 d46:	91 05       	cpc	r25, r1
 d48:	00 f1       	brcs	.+64     	; 0xd8a <__vector_3+0x280>
 d4a:	80 91 35 3c 	lds	r24, 0x3C35	; 0x803c35 <InputState>
 d4e:	87 30       	cpi	r24, 0x07	; 7
 d50:	e1 f4       	brne	.+56     	; 0xd8a <__vector_3+0x280>
 d52:	80 91 04 3c 	lds	r24, 0x3C04	; 0x803c04 <dev_mode_flag>
 d56:	90 91 05 3c 	lds	r25, 0x3C05	; 0x803c05 <dev_mode_flag+0x1>
 d5a:	a0 91 06 3c 	lds	r26, 0x3C06	; 0x803c06 <dev_mode_flag+0x2>
 d5e:	b0 91 07 3c 	lds	r27, 0x3C07	; 0x803c07 <dev_mode_flag+0x3>
 d62:	01 97       	sbiw	r24, 0x01	; 1
 d64:	a1 05       	cpc	r26, r1
 d66:	b1 05       	cpc	r27, r1
 d68:	81 f4       	brne	.+32     	; 0xd8a <__vector_3+0x280>
			State.currentState = DEV_MODE;
 d6a:	85 e0       	ldi	r24, 0x05	; 5
 d6c:	80 93 39 3c 	sts	0x3C39, r24	; 0x803c39 <State>
			BuzzerState.currentState = DEV_MODE_SOUND;
 d70:	86 e0       	ldi	r24, 0x06	; 6
 d72:	80 93 3c 3c 	sts	0x3C3C, r24	; 0x803c3c <BuzzerState>
			Buzzer();
 d76:	a8 d9       	rcall	.-3248   	; 0xc8 <Buzzer>
			dev_mode_flag=0;
 d78:	10 92 04 3c 	sts	0x3C04, r1	; 0x803c04 <dev_mode_flag>
 d7c:	10 92 05 3c 	sts	0x3C05, r1	; 0x803c05 <dev_mode_flag+0x1>
 d80:	10 92 06 3c 	sts	0x3C06, r1	; 0x803c06 <dev_mode_flag+0x2>
 d84:	10 92 07 3c 	sts	0x3C07, r1	; 0x803c07 <dev_mode_flag+0x3>
			//Close all lights at first;
			setState();
 d88:	69 db       	rcall	.-2350   	; 0x45c <setState>
		}
	}
	if(BuzzerFlag==1){
 d8a:	80 91 30 3c 	lds	r24, 0x3C30	; 0x803c30 <BuzzerFlag>
 d8e:	90 91 31 3c 	lds	r25, 0x3C31	; 0x803c31 <BuzzerFlag+0x1>
 d92:	a0 91 32 3c 	lds	r26, 0x3C32	; 0x803c32 <BuzzerFlag+0x2>
 d96:	b0 91 33 3c 	lds	r27, 0x3C33	; 0x803c33 <BuzzerFlag+0x3>
 d9a:	01 97       	sbiw	r24, 0x01	; 1
 d9c:	a1 05       	cpc	r26, r1
 d9e:	b1 05       	cpc	r27, r1
 da0:	09 f0       	breq	.+2      	; 0xda4 <__vector_3+0x29a>
 da2:	62 c0       	rjmp	.+196    	; 0xe68 <__vector_3+0x35e>
		BuzzerCounter++;
 da4:	80 91 2c 3c 	lds	r24, 0x3C2C	; 0x803c2c <BuzzerCounter>
 da8:	90 91 2d 3c 	lds	r25, 0x3C2D	; 0x803c2d <BuzzerCounter+0x1>
 dac:	a0 91 2e 3c 	lds	r26, 0x3C2E	; 0x803c2e <BuzzerCounter+0x2>
 db0:	b0 91 2f 3c 	lds	r27, 0x3C2F	; 0x803c2f <BuzzerCounter+0x3>
 db4:	01 96       	adiw	r24, 0x01	; 1
 db6:	a1 1d       	adc	r26, r1
 db8:	b1 1d       	adc	r27, r1
 dba:	80 93 2c 3c 	sts	0x3C2C, r24	; 0x803c2c <BuzzerCounter>
 dbe:	90 93 2d 3c 	sts	0x3C2D, r25	; 0x803c2d <BuzzerCounter+0x1>
 dc2:	a0 93 2e 3c 	sts	0x3C2E, r26	; 0x803c2e <BuzzerCounter+0x2>
 dc6:	b0 93 2f 3c 	sts	0x3C2F, r27	; 0x803c2f <BuzzerCounter+0x3>
		PORTD.OUT |= (1<<BUZZER); 
 dca:	e0 e6       	ldi	r30, 0x60	; 96
 dcc:	f4 e0       	ldi	r31, 0x04	; 4
 dce:	84 81       	ldd	r24, Z+4	; 0x04
 dd0:	80 68       	ori	r24, 0x80	; 128
 dd2:	84 83       	std	Z+4, r24	; 0x04
		Buzzer();
 dd4:	79 d9       	rcall	.-3342   	; 0xc8 <Buzzer>
		
		if(BuzzerCounter*RTC_TICK>=ONE_SEC/10){
 dd6:	20 91 2c 3c 	lds	r18, 0x3C2C	; 0x803c2c <BuzzerCounter>
 dda:	30 91 2d 3c 	lds	r19, 0x3C2D	; 0x803c2d <BuzzerCounter+0x1>
 dde:	40 91 2e 3c 	lds	r20, 0x3C2E	; 0x803c2e <BuzzerCounter+0x2>
 de2:	50 91 2f 3c 	lds	r21, 0x3C2F	; 0x803c2f <BuzzerCounter+0x3>
 de6:	aa e7       	ldi	r26, 0x7A	; 122
 de8:	b0 e0       	ldi	r27, 0x00	; 0
 dea:	9b d0       	rcall	.+310    	; 0xf22 <__muluhisi3>
 dec:	60 3a       	cpi	r22, 0xA0	; 160
 dee:	76 48       	sbci	r23, 0x86	; 134
 df0:	81 40       	sbci	r24, 0x01	; 1
 df2:	91 05       	cpc	r25, r1
 df4:	e8 f0       	brcs	.+58     	; 0xe30 <__vector_3+0x326>
			BuzzerFlag=0;
 df6:	10 92 30 3c 	sts	0x3C30, r1	; 0x803c30 <BuzzerFlag>
 dfa:	10 92 31 3c 	sts	0x3C31, r1	; 0x803c31 <BuzzerFlag+0x1>
 dfe:	10 92 32 3c 	sts	0x3C32, r1	; 0x803c32 <BuzzerFlag+0x2>
 e02:	10 92 33 3c 	sts	0x3C33, r1	; 0x803c33 <BuzzerFlag+0x3>
			BuzzerCounter=0;
 e06:	10 92 2c 3c 	sts	0x3C2C, r1	; 0x803c2c <BuzzerCounter>
 e0a:	10 92 2d 3c 	sts	0x3C2D, r1	; 0x803c2d <BuzzerCounter+0x1>
 e0e:	10 92 2e 3c 	sts	0x3C2E, r1	; 0x803c2e <BuzzerCounter+0x2>
 e12:	10 92 2f 3c 	sts	0x3C2F, r1	; 0x803c2f <BuzzerCounter+0x3>
			Pitch_flag=0;
 e16:	10 92 28 3c 	sts	0x3C28, r1	; 0x803c28 <Pitch_flag>
 e1a:	10 92 29 3c 	sts	0x3C29, r1	; 0x803c29 <Pitch_flag+0x1>
 e1e:	10 92 2a 3c 	sts	0x3C2A, r1	; 0x803c2a <Pitch_flag+0x2>
 e22:	10 92 2b 3c 	sts	0x3C2B, r1	; 0x803c2b <Pitch_flag+0x3>
			PORTD.OUT &= ~(1<<BUZZER); 
 e26:	e0 e6       	ldi	r30, 0x60	; 96
 e28:	f4 e0       	ldi	r31, 0x04	; 4
 e2a:	84 81       	ldd	r24, Z+4	; 0x04
 e2c:	8f 77       	andi	r24, 0x7F	; 127
 e2e:	84 83       	std	Z+4, r24	; 0x04
		}
		if(BuzzerCounter*RTC_TICK>=ONE_SEC/20){
 e30:	20 91 2c 3c 	lds	r18, 0x3C2C	; 0x803c2c <BuzzerCounter>
 e34:	30 91 2d 3c 	lds	r19, 0x3C2D	; 0x803c2d <BuzzerCounter+0x1>
 e38:	40 91 2e 3c 	lds	r20, 0x3C2E	; 0x803c2e <BuzzerCounter+0x2>
 e3c:	50 91 2f 3c 	lds	r21, 0x3C2F	; 0x803c2f <BuzzerCounter+0x3>
 e40:	aa e7       	ldi	r26, 0x7A	; 122
 e42:	b0 e0       	ldi	r27, 0x00	; 0
 e44:	6e d0       	rcall	.+220    	; 0xf22 <__muluhisi3>
 e46:	60 35       	cpi	r22, 0x50	; 80
 e48:	73 4c       	sbci	r23, 0xC3	; 195
 e4a:	81 05       	cpc	r24, r1
 e4c:	91 05       	cpc	r25, r1
 e4e:	60 f0       	brcs	.+24     	; 0xe68 <__vector_3+0x35e>
			Pitch_flag=1;
 e50:	81 e0       	ldi	r24, 0x01	; 1
 e52:	90 e0       	ldi	r25, 0x00	; 0
 e54:	a0 e0       	ldi	r26, 0x00	; 0
 e56:	b0 e0       	ldi	r27, 0x00	; 0
 e58:	80 93 28 3c 	sts	0x3C28, r24	; 0x803c28 <Pitch_flag>
 e5c:	90 93 29 3c 	sts	0x3C29, r25	; 0x803c29 <Pitch_flag+0x1>
 e60:	a0 93 2a 3c 	sts	0x3C2A, r26	; 0x803c2a <Pitch_flag+0x2>
 e64:	b0 93 2b 3c 	sts	0x3C2B, r27	; 0x803c2b <Pitch_flag+0x3>
		}
	}
	if(State.currentState==DEV_MODE){
 e68:	80 91 39 3c 	lds	r24, 0x3C39	; 0x803c39 <State>
 e6c:	85 30       	cpi	r24, 0x05	; 5
 e6e:	61 f5       	brne	.+88     	; 0xec8 <__vector_3+0x3be>
		dev_mode_timer++;
 e70:	80 91 00 3c 	lds	r24, 0x3C00	; 0x803c00 <__DATA_REGION_ORIGIN__>
 e74:	90 91 01 3c 	lds	r25, 0x3C01	; 0x803c01 <__DATA_REGION_ORIGIN__+0x1>
 e78:	a0 91 02 3c 	lds	r26, 0x3C02	; 0x803c02 <__DATA_REGION_ORIGIN__+0x2>
 e7c:	b0 91 03 3c 	lds	r27, 0x3C03	; 0x803c03 <__DATA_REGION_ORIGIN__+0x3>
 e80:	01 96       	adiw	r24, 0x01	; 1
 e82:	a1 1d       	adc	r26, r1
 e84:	b1 1d       	adc	r27, r1
 e86:	80 93 00 3c 	sts	0x3C00, r24	; 0x803c00 <__DATA_REGION_ORIGIN__>
 e8a:	90 93 01 3c 	sts	0x3C01, r25	; 0x803c01 <__DATA_REGION_ORIGIN__+0x1>
 e8e:	a0 93 02 3c 	sts	0x3C02, r26	; 0x803c02 <__DATA_REGION_ORIGIN__+0x2>
 e92:	b0 93 03 3c 	sts	0x3C03, r27	; 0x803c03 <__DATA_REGION_ORIGIN__+0x3>
		if(dev_mode_timer*RTC_TICK>=ONE_SEC){
 e96:	20 91 00 3c 	lds	r18, 0x3C00	; 0x803c00 <__DATA_REGION_ORIGIN__>
 e9a:	30 91 01 3c 	lds	r19, 0x3C01	; 0x803c01 <__DATA_REGION_ORIGIN__+0x1>
 e9e:	40 91 02 3c 	lds	r20, 0x3C02	; 0x803c02 <__DATA_REGION_ORIGIN__+0x2>
 ea2:	50 91 03 3c 	lds	r21, 0x3C03	; 0x803c03 <__DATA_REGION_ORIGIN__+0x3>
 ea6:	aa e7       	ldi	r26, 0x7A	; 122
 ea8:	b0 e0       	ldi	r27, 0x00	; 0
 eaa:	3b d0       	rcall	.+118    	; 0xf22 <__muluhisi3>
 eac:	60 34       	cpi	r22, 0x40	; 64
 eae:	72 44       	sbci	r23, 0x42	; 66
 eb0:	8f 40       	sbci	r24, 0x0F	; 15
 eb2:	91 05       	cpc	r25, r1
 eb4:	48 f0       	brcs	.+18     	; 0xec8 <__vector_3+0x3be>
			dev_mode_timer=0;
 eb6:	10 92 00 3c 	sts	0x3C00, r1	; 0x803c00 <__DATA_REGION_ORIGIN__>
 eba:	10 92 01 3c 	sts	0x3C01, r1	; 0x803c01 <__DATA_REGION_ORIGIN__+0x1>
 ebe:	10 92 02 3c 	sts	0x3C02, r1	; 0x803c02 <__DATA_REGION_ORIGIN__+0x2>
 ec2:	10 92 03 3c 	sts	0x3C03, r1	; 0x803c03 <__DATA_REGION_ORIGIN__+0x3>
			setState();
 ec6:	ca da       	rcall	.-2668   	; 0x45c <setState>
		}
	}
}
 ec8:	ff 91       	pop	r31
 eca:	ef 91       	pop	r30
 ecc:	bf 91       	pop	r27
 ece:	af 91       	pop	r26
 ed0:	9f 91       	pop	r25
 ed2:	8f 91       	pop	r24
 ed4:	7f 91       	pop	r23
 ed6:	6f 91       	pop	r22
 ed8:	5f 91       	pop	r21
 eda:	4f 91       	pop	r20
 edc:	3f 91       	pop	r19
 ede:	2f 91       	pop	r18
 ee0:	0f 90       	pop	r0
 ee2:	0f be       	out	0x3f, r0	; 63
 ee4:	0f 90       	pop	r0
 ee6:	1f 90       	pop	r1
 ee8:	18 95       	reti

00000eea <__divmodsi4>:
 eea:	05 2e       	mov	r0, r21
 eec:	97 fb       	bst	r25, 7
 eee:	16 f4       	brtc	.+4      	; 0xef4 <__divmodsi4+0xa>
 ef0:	00 94       	com	r0
 ef2:	0f d0       	rcall	.+30     	; 0xf12 <__negsi2>
 ef4:	57 fd       	sbrc	r21, 7
 ef6:	05 d0       	rcall	.+10     	; 0xf02 <__divmodsi4_neg2>
 ef8:	1e d0       	rcall	.+60     	; 0xf36 <__udivmodsi4>
 efa:	07 fc       	sbrc	r0, 7
 efc:	02 d0       	rcall	.+4      	; 0xf02 <__divmodsi4_neg2>
 efe:	46 f4       	brtc	.+16     	; 0xf10 <__divmodsi4_exit>
 f00:	08 c0       	rjmp	.+16     	; 0xf12 <__negsi2>

00000f02 <__divmodsi4_neg2>:
 f02:	50 95       	com	r21
 f04:	40 95       	com	r20
 f06:	30 95       	com	r19
 f08:	21 95       	neg	r18
 f0a:	3f 4f       	sbci	r19, 0xFF	; 255
 f0c:	4f 4f       	sbci	r20, 0xFF	; 255
 f0e:	5f 4f       	sbci	r21, 0xFF	; 255

00000f10 <__divmodsi4_exit>:
 f10:	08 95       	ret

00000f12 <__negsi2>:
 f12:	90 95       	com	r25
 f14:	80 95       	com	r24
 f16:	70 95       	com	r23
 f18:	61 95       	neg	r22
 f1a:	7f 4f       	sbci	r23, 0xFF	; 255
 f1c:	8f 4f       	sbci	r24, 0xFF	; 255
 f1e:	9f 4f       	sbci	r25, 0xFF	; 255
 f20:	08 95       	ret

00000f22 <__muluhisi3>:
 f22:	2b d0       	rcall	.+86     	; 0xf7a <__umulhisi3>
 f24:	a5 9f       	mul	r26, r21
 f26:	90 0d       	add	r25, r0
 f28:	b4 9f       	mul	r27, r20
 f2a:	90 0d       	add	r25, r0
 f2c:	a4 9f       	mul	r26, r20
 f2e:	80 0d       	add	r24, r0
 f30:	91 1d       	adc	r25, r1
 f32:	11 24       	eor	r1, r1
 f34:	08 95       	ret

00000f36 <__udivmodsi4>:
 f36:	a1 e2       	ldi	r26, 0x21	; 33
 f38:	1a 2e       	mov	r1, r26
 f3a:	aa 1b       	sub	r26, r26
 f3c:	bb 1b       	sub	r27, r27
 f3e:	fd 01       	movw	r30, r26
 f40:	0d c0       	rjmp	.+26     	; 0xf5c <__udivmodsi4_ep>

00000f42 <__udivmodsi4_loop>:
 f42:	aa 1f       	adc	r26, r26
 f44:	bb 1f       	adc	r27, r27
 f46:	ee 1f       	adc	r30, r30
 f48:	ff 1f       	adc	r31, r31
 f4a:	a2 17       	cp	r26, r18
 f4c:	b3 07       	cpc	r27, r19
 f4e:	e4 07       	cpc	r30, r20
 f50:	f5 07       	cpc	r31, r21
 f52:	20 f0       	brcs	.+8      	; 0xf5c <__udivmodsi4_ep>
 f54:	a2 1b       	sub	r26, r18
 f56:	b3 0b       	sbc	r27, r19
 f58:	e4 0b       	sbc	r30, r20
 f5a:	f5 0b       	sbc	r31, r21

00000f5c <__udivmodsi4_ep>:
 f5c:	66 1f       	adc	r22, r22
 f5e:	77 1f       	adc	r23, r23
 f60:	88 1f       	adc	r24, r24
 f62:	99 1f       	adc	r25, r25
 f64:	1a 94       	dec	r1
 f66:	69 f7       	brne	.-38     	; 0xf42 <__udivmodsi4_loop>
 f68:	60 95       	com	r22
 f6a:	70 95       	com	r23
 f6c:	80 95       	com	r24
 f6e:	90 95       	com	r25
 f70:	9b 01       	movw	r18, r22
 f72:	ac 01       	movw	r20, r24
 f74:	bd 01       	movw	r22, r26
 f76:	cf 01       	movw	r24, r30
 f78:	08 95       	ret

00000f7a <__umulhisi3>:
 f7a:	a2 9f       	mul	r26, r18
 f7c:	b0 01       	movw	r22, r0
 f7e:	b3 9f       	mul	r27, r19
 f80:	c0 01       	movw	r24, r0
 f82:	a3 9f       	mul	r26, r19
 f84:	01 d0       	rcall	.+2      	; 0xf88 <__umulhisi3+0xe>
 f86:	b2 9f       	mul	r27, r18
 f88:	70 0d       	add	r23, r0
 f8a:	81 1d       	adc	r24, r1
 f8c:	11 24       	eor	r1, r1
 f8e:	91 1d       	adc	r25, r1
 f90:	08 95       	ret

00000f92 <_exit>:
 f92:	f8 94       	cli

00000f94 <__stop_program>:
 f94:	ff cf       	rjmp	.-2      	; 0xf94 <__stop_program>
