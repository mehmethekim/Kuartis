
Interrupt_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000018a  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000220  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000756  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000690  00000000  00000000  00000a16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cb  00000000  00000000  000010a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  00001374  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c0  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000da  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000187a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e8       	ldi	r30, 0x8A	; 138
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 95 00 	call	0x12a	; 0x12a <main>
  9e:	0c 94 c3 00 	jmp	0x186	; 0x186 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:
#define F_CPU 16000000UL
#endif
#include <util/delay.h>
volatile uint8_t counter = 0x10; //0b0001 0000;
int cliFlag= 0;
ISR(INT0_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	//If 1000 0000 reset to 0001 0000
	//increment
	if(counter>0x80){ 
  b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  b8:	81 38       	cpi	r24, 0x81	; 129
  ba:	20 f0       	brcs	.+8      	; 0xc4 <__vector_1+0x1e>
		counter = 0x10;
  bc:	80 e1       	ldi	r24, 0x10	; 16
  be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  c2:	05 c0       	rjmp	.+10     	; 0xce <__vector_1+0x28>
	}
	else{
		counter *= 2; // shift left
  c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c8:	88 0f       	add	r24, r24
  ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	cliFlag=1;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
  d6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	
}
  da:	9f 91       	pop	r25
  dc:	8f 91       	pop	r24
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <__vector_2>:
ISR(INT1_vect){
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
	//If 0001 0000 reset to 0001 0000
	//decrement
	if(counter<=0x10){
  f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fa:	81 31       	cpi	r24, 0x11	; 17
  fc:	20 f4       	brcc	.+8      	; 0x106 <__vector_2+0x1e>
		counter = 0x80;
  fe:	80 e8       	ldi	r24, 0x80	; 128
 100:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 104:	05 c0       	rjmp	.+10     	; 0x110 <__vector_2+0x28>
	}
	else{
		counter /= 2; // shift left
 106:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10a:	86 95       	lsr	r24
 10c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	cliFlag=1;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 118:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
}
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <main>:
int main(void)
{
	DDRD &= 0xF3;
 12a:	8a b1       	in	r24, 0x0a	; 10
 12c:	83 7f       	andi	r24, 0xF3	; 243
 12e:	8a b9       	out	0x0a, r24	; 10
	DDRD |= 0xF0; //0b11110000 LED's are output, Interrupts are input
 130:	8a b1       	in	r24, 0x0a	; 10
 132:	80 6f       	ori	r24, 0xF0	; 240
 134:	8a b9       	out	0x0a, r24	; 10
    PORTD = 0x0C; //0b00001100 SET Interrupts to 1. We will use falling edge trigger.
 136:	8c e0       	ldi	r24, 0x0C	; 12
 138:	8b b9       	out	0x0b, r24	; 11
	EICRA |= (0b10<<ISC10) | (0b10<<ISC00); // For interrupt 1, ISC11 and ISC10 is set to 1-0, For interrupt 0 ISC01 and ISC00 is set to 1-0 (For falling edge)
 13a:	e9 e6       	ldi	r30, 0x69	; 105
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	8a 60       	ori	r24, 0x0A	; 10
 142:	80 83       	st	Z, r24
	EIMSK = 0x03; //0b00000011 Enable interrupt SREG enabled
 144:	83 e0       	ldi	r24, 0x03	; 3
 146:	8d bb       	out	0x1d, r24	; 29
	 // enable global interrupts
	PORTD &= 0b00001111;
 148:	8b b1       	in	r24, 0x0b	; 11
 14a:	8f 70       	andi	r24, 0x0F	; 15
 14c:	8b b9       	out	0x0b, r24	; 11
	
    while (1) 
    {
		 // close LED's
		if(cliFlag==0){
 14e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 152:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 156:	89 2b       	or	r24, r25
 158:	11 f4       	brne	.+4      	; 0x15e <main+0x34>
			sei();
 15a:	78 94       	sei
 15c:	0e c0       	rjmp	.+28     	; 0x17a <main+0x50>
		}
		else{
			cli();
 15e:	f8 94       	cli
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	2f ef       	ldi	r18, 0xFF	; 255
 162:	83 ed       	ldi	r24, 0xD3	; 211
 164:	90 e3       	ldi	r25, 0x30	; 48
 166:	21 50       	subi	r18, 0x01	; 1
 168:	80 40       	sbci	r24, 0x00	; 0
 16a:	90 40       	sbci	r25, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <main+0x3c>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x46>
 170:	00 00       	nop
			_delay_ms(1000);
			cliFlag=0;
 172:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 176:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
		}
		
		PORTD |= counter;
 17a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	89 2b       	or	r24, r25
 182:	8b b9       	out	0x0b, r24	; 11
		
		
    }
 184:	e4 cf       	rjmp	.-56     	; 0x14e <main+0x24>

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
