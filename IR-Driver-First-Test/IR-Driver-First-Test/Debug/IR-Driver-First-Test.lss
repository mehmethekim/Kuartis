
IR-Driver-First-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000262  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000075a  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000660  00000000  00000000  00000a56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ab  00000000  00000000  000010b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00001364  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d0  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000070  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000017fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
int Total_time = 0;
int bit_counter = 0;
int counter_time = 0;
int main(void)
{
	TCCR0A = (1<<WGM01);
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	84 bd       	out	0x24, r24	; 36
	OCR0A = 2;
  94:	87 bd       	out	0x27, r24	; 39
	TCCR0B = (1<<CS01); // clk/8 prescalar. to count 1us each clock
  96:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<OCIE0A);
  98:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	
	DDRD = (1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) ; // For Red LED's, mode indication
  9c:	80 ef       	ldi	r24, 0xF0	; 240
  9e:	8a b9       	out	0x0a, r24	; 10
	DDRB = (1<<PORTB5)|(0<<PORTB3); // Green LED for ON/OFF indication , PORTB3 as input
  a0:	80 e2       	ldi	r24, 0x20	; 32
  a2:	84 b9       	out	0x04, r24	; 4
	PORTD &= 0b00001111;
  a4:	8b b1       	in	r24, 0x0b	; 11
  a6:	8f 70       	andi	r24, 0x0F	; 15
  a8:	8b b9       	out	0x0b, r24	; 11
	PORTB = 0b11011111; //PORT B3 initially high
  aa:	8f ed       	ldi	r24, 0xDF	; 223
  ac:	85 b9       	out	0x05, r24	; 5
	State.currentState = IDLE; // Start at IDLE state initially
  ae:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <State>
	
    while (1) 
    {
		if(my_register == 0x18){
  b2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <my_register>
  b6:	88 31       	cpi	r24, 0x18	; 24
  b8:	31 f4       	brne	.+12     	; 0xc6 <main+0x36>
			PORTD &= 0b00001111; // close all led's first
  ba:	8b b1       	in	r24, 0x0b	; 11
  bc:	8f 70       	andi	r24, 0x0F	; 15
  be:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1<<PORTD7);// open first led only
  c0:	8b b1       	in	r24, 0x0b	; 11
  c2:	80 68       	ori	r24, 0x80	; 128
  c4:	8b b9       	out	0x0b, r24	; 11
		}
		if(my_register == 0x4A){
  c6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <my_register>
  ca:	8a 34       	cpi	r24, 0x4A	; 74
  cc:	31 f4       	brne	.+12     	; 0xda <main+0x4a>
			PORTD &= 0b00001111; // close all led's first
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	8f 70       	andi	r24, 0x0F	; 15
  d2:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1<<PORTD6);// open first led only
  d4:	8b b1       	in	r24, 0x0b	; 11
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	8b b9       	out	0x0b, r24	; 11
		}
		if(my_register == 0x38){
  da:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <my_register>
  de:	88 33       	cpi	r24, 0x38	; 56
  e0:	41 f7       	brne	.-48     	; 0xb2 <main+0x22>
			PORTD &= 0b00001111;
  e2:	8b b1       	in	r24, 0x0b	; 11
  e4:	8f 70       	andi	r24, 0x0F	; 15
  e6:	8b b9       	out	0x0b, r24	; 11
			PORTB ^= (1<<PORTB5);
  e8:	95 b1       	in	r25, 0x05	; 5
  ea:	80 e2       	ldi	r24, 0x20	; 32
  ec:	89 27       	eor	r24, r25
  ee:	85 b9       	out	0x05, r24	; 5
  f0:	e0 cf       	rjmp	.-64     	; 0xb2 <main+0x22>

000000f2 <__vector_14>:
		}
		
    }
}

ISR(TIMER0_COMPA_vect){
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	2f 93       	push	r18
  fe:	3f 93       	push	r19
 100:	4f 93       	push	r20
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
	
	
	switch(State.currentState){
 106:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <State>
 10a:	82 30       	cpi	r24, 0x02	; 2
 10c:	f1 f0       	breq	.+60     	; 0x14a <__vector_14+0x58>
 10e:	18 f4       	brcc	.+6      	; 0x116 <__vector_14+0x24>
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	39 f0       	breq	.+14     	; 0x122 <__vector_14+0x30>
 114:	60 c0       	rjmp	.+192    	; 0x1d6 <__vector_14+0xe4>
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	11 f1       	breq	.+68     	; 0x15e <__vector_14+0x6c>
 11a:	84 30       	cpi	r24, 0x04	; 4
 11c:	09 f4       	brne	.+2      	; 0x120 <__vector_14+0x2e>
 11e:	52 c0       	rjmp	.+164    	; 0x1c4 <__vector_14+0xd2>
 120:	5a c0       	rjmp	.+180    	; 0x1d6 <__vector_14+0xe4>
				State.currentState = START;
				
			}
			break;
		case(START):
			PORTB |= (1<<PORTB5);
 122:	85 b1       	in	r24, 0x05	; 5
 124:	80 62       	ori	r24, 0x20	; 32
 126:	85 b9       	out	0x05, r24	; 5
			Total_time++;
 128:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Total_time>
 12c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Total_time+0x1>
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <Total_time+0x1>
 136:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Total_time>
			if(Total_time==13500){
 13a:	8c 3b       	cpi	r24, 0xBC	; 188
 13c:	94 43       	sbci	r25, 0x34	; 52
 13e:	09 f0       	breq	.+2      	; 0x142 <__vector_14+0x50>
 140:	4a c0       	rjmp	.+148    	; 0x1d6 <__vector_14+0xe4>
				State.currentState = ADDRESS;
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <State>
 148:	46 c0       	rjmp	.+140    	; 0x1d6 <__vector_14+0xe4>
				}//13.5 ms 
			break;
		case(ADDRESS):
			Total_time++;
 14a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Total_time>
 14e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Total_time+0x1>
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <Total_time+0x1>
 158:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Total_time>
			if(Total_time == 40500){
				State.currentState = COMMAND;
			}
			break;
 15c:	3c c0       	rjmp	.+120    	; 0x1d6 <__vector_14+0xe4>
		case(COMMAND):
			Total_time++;
 15e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Total_time>
 162:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Total_time+0x1>
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <Total_time+0x1>
 16c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Total_time>
			counter_time++;
 170:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 174:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 17e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			if(bit_counter == 8){
 182:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <bit_counter>
 186:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <bit_counter+0x1>
 18a:	28 30       	cpi	r18, 0x08	; 8
 18c:	31 05       	cpc	r19, r1
 18e:	19 f4       	brne	.+6      	; 0x196 <__vector_14+0xa4>
				State.currentState = END;
 190:	44 e0       	ldi	r20, 0x04	; 4
 192:	40 93 07 01 	sts	0x0107, r20	; 0x800107 <State>
				my_register = my_register<<1; // 0 added automatically
				
				bit_counter++;
			}
			else{
				if(counter_time == 2250){
 196:	8a 3c       	cpi	r24, 0xCA	; 202
 198:	48 e0       	ldi	r20, 0x08	; 8
 19a:	94 07       	cpc	r25, r20
 19c:	e1 f4       	brne	.+56     	; 0x1d6 <__vector_14+0xe4>
					counter_time = counter_time -2250;
 19e:	8a 5c       	subi	r24, 0xCA	; 202
 1a0:	98 40       	sbci	r25, 0x08	; 8
 1a2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					my_register = my_register<<1;
 1aa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <my_register>
 1ae:	88 0f       	add	r24, r24
					my_register = my_register | 0x01;
 1b0:	81 60       	ori	r24, 0x01	; 1
 1b2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <my_register>
					bit_counter++;
 1b6:	2f 5f       	subi	r18, 0xFF	; 255
 1b8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ba:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <bit_counter+0x1>
 1be:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <bit_counter>
 1c2:	09 c0       	rjmp	.+18     	; 0x1d6 <__vector_14+0xe4>
					
				}
			}
			break;
		case(END):
			Total_time++;
 1c4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Total_time>
 1c8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Total_time+0x1>
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <Total_time+0x1>
 1d2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Total_time>
			break;
		
		default:
			break;
	}
}
 1d6:	9f 91       	pop	r25
 1d8:	8f 91       	pop	r24
 1da:	4f 91       	pop	r20
 1dc:	3f 91       	pop	r19
 1de:	2f 91       	pop	r18
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <_exit>:
 1ea:	f8 94       	cli

000001ec <__stop_program>:
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <__stop_program>
